{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "30935"
    },
    "items": [
        {
            "metadata": {
                "name": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "selfLink": "/api/v1/nodes/gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "uid": "836e18cd-63eb-11e9-858b-42010a800036",
                "resourceVersion": "30935",
                "creationTimestamp": "2019-04-21T04:11:18Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/fluentd-ds-ready": "true",
                    "beta.kubernetes.io/instance-type": "n1-standard-2",
                    "beta.kubernetes.io/os": "linux",
                    "cloud.google.com/gke-nodepool": "default-pool",
                    "cloud.google.com/gke-os-distribution": "cos",
                    "failure-domain.beta.kubernetes.io/region": "us-central1",
                    "failure-domain.beta.kubernetes.io/zone": "us-central1-a",
                    "kubernetes.io/hostname": "gke-k8s-demo-default-pool-bc3c4575-9jxq"
                },
                "annotations": {
                    "container.googleapis.com/instance_id": "2599055549611267052",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.0.0.0/24",
                "providerID": "gce://sapient-office-218912/us-central1-a/gke-k8s-demo-default-pool-bc3c4575-9jxq"
            },
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "98868448Ki",
                    "hugepages-2Mi": "0",
                    "memory": "7658208Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "1930m",
                    "ephemeral-storage": "47093746742",
                    "hugepages-2Mi": "0",
                    "memory": "5778144Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "FrequentDockerRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:14:57Z",
                        "reason": "FrequentDockerRestart",
                        "message": "docker is functioning properly"
                    },
                    {
                        "type": "FrequentContainerdRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:14:58Z",
                        "reason": "FrequentContainerdRestart",
                        "message": "containerd is functioning properly"
                    },
                    {
                        "type": "CorruptDockerOverlay2",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:14:56Z",
                        "reason": "CorruptDockerOverlay2",
                        "message": "docker overlay2 is functioning properly"
                    },
                    {
                        "type": "KernelDeadlock",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:09:55Z",
                        "reason": "KernelHasNoDeadlock",
                        "message": "kernel has no deadlock"
                    },
                    {
                        "type": "ReadonlyFilesystem",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:09:55Z",
                        "reason": "FilesystemIsNotReadOnly",
                        "message": "Filesystem is not read-only"
                    },
                    {
                        "type": "FrequentUnregisterNetDevice",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:14:56Z",
                        "reason": "UnregisterNetDevice",
                        "message": "node is functioning properly"
                    },
                    {
                        "type": "FrequentKubeletRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:44Z",
                        "lastTransitionTime": "2019-04-21T04:14:56Z",
                        "reason": "FrequentKubeletRestart",
                        "message": "kubelet is functioning properly"
                    },
                    {
                        "type": "NetworkUnavailable",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T04:11:37Z",
                        "lastTransitionTime": "2019-04-21T04:11:37Z",
                        "reason": "RouteCreated",
                        "message": "RouteController created a route"
                    },
                    {
                        "type": "OutOfDisk",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:18Z",
                        "reason": "KubeletHasSufficientDisk",
                        "message": "kubelet has sufficient disk space available"
                    },
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:18Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:18Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:18Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2019-04-21T07:35:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:38Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status. AppArmor enabled"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "10.128.0.52"
                    },
                    {
                        "type": "ExternalIP",
                        "address": "34.66.233.150"
                    },
                    {
                        "type": "Hostname",
                        "address": "gke-k8s-demo-default-pool-bc3c4575-9jxq"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "693fe4eb8871d04121aba902fd68adaa",
                    "systemUUID": "693FE4EB-8871-D041-21AB-A902FD68ADAA",
                    "bootID": "20a0d2ce-a7c7-41ae-b484-de3cd3556323",
                    "kernelVersion": "4.14.91+",
                    "osImage": "Container-Optimized OS from Google",
                    "containerRuntimeVersion": "docker://17.3.2",
                    "kubeletVersion": "v1.11.8-gke.6",
                    "kubeProxyVersion": "v1.11.8-gke.6",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/node-problem-detector@sha256:f95cab985c26b2f46e9bd43283e0bfa88860c14e0fb0649266babe8b65e9eb2b",
                            "k8s.gcr.io/node-problem-detector:v0.4.1"
                        ],
                        "sizeBytes": 286572743
                    },
                    {
                        "names": [
                            "gcr.io/google-samples/cassandra@sha256:7a3d20afa0a46ed073a5c587b4f37e21fa860e83c60b9c42fec1e1e739d64007",
                            "gcr.io/google-samples/cassandra:v13"
                        ],
                        "sizeBytes": 234942562
                    },
                    {
                        "names": [
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1"
                        ],
                        "sizeBytes": 223242132
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-elasticsearch@sha256:b8c94527b489fb61d3d81ce5ad7f3ddbb7be71e9620a3a36e2bede2f2e487d73",
                            "k8s.gcr.io/fluentd-elasticsearch:v2.0.4"
                        ],
                        "sizeBytes": 135716379
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-gcp-scaler@sha256:457a13df66534b94bab627c4c2dc2df0ee5153a5d0f0afd27502bd46bd8da81d",
                            "k8s.gcr.io/fluentd-gcp-scaler:0.5"
                        ],
                        "sizeBytes": 103488147
                    },
                    {
                        "names": [
                            "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                            "k8s.gcr.io/kube-proxy:v1.11.8-gke.6"
                        ],
                        "sizeBytes": 102992660
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kubernetes-dashboard-amd64@sha256:dc4026c1b595435ef5527ca598e1e9c4343076926d7d62b365c44831395adbd0",
                            "k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3"
                        ],
                        "sizeBytes": 102319441
                    },
                    {
                        "names": [
                            "k8s.gcr.io/event-exporter@sha256:7f9cd7cb04d6959b0aa960727d04fa86759008048c785397b7b0d9dff0007516",
                            "k8s.gcr.io/event-exporter:v0.2.3"
                        ],
                        "sizeBytes": 94171943
                    },
                    {
                        "names": [
                            "k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                            "k8s.gcr.io/prometheus-to-sd:v0.3.1"
                        ],
                        "sizeBytes": 88077694
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-amd64@sha256:9fae0af136ce0cf4f88393b3670f7139ffc464692060c374d2ae748e13144521",
                            "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1"
                        ],
                        "sizeBytes": 76016169
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ingress-gce-glbc-amd64@sha256:31d36bbd9c44caffa135fc78cf0737266fcf25e3cf0cd1c2fcbfbc4f7309cc52",
                            "k8s.gcr.io/ingress-gce-glbc-amd64:v1.1.1"
                        ],
                        "sizeBytes": 67801919
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-addon-manager@sha256:d53486c3a0b49ebee019932878dc44232735d5622a51dbbdcec7124199020d09",
                            "k8s.gcr.io/kube-addon-manager:v8.7"
                        ],
                        "sizeBytes": 63322109
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cpvpa-amd64@sha256:cfe7b0a11c9c8e18c87b1eb34fef9a7cbb8480a8da11fc2657f78dbf4739f869",
                            "k8s.gcr.io/cpvpa-amd64:v0.6.0"
                        ],
                        "sizeBytes": 51785854
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:618a82fa66cf0c75e4753369a6999032372be7308866fc9afb381789b1e5ad52",
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13"
                        ],
                        "sizeBytes": 51157394
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64@sha256:003f98d9f411ddfa6ff6d539196355e03ddd69fa4ed38c7ffb8fec6f729afe2d",
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2"
                        ],
                        "sizeBytes": 49648481
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ip-masq-agent-amd64@sha256:1ffda57d87901bc01324c82ceb2145fe6a0448d3f0dd9cb65aa76a867cd62103",
                            "k8s.gcr.io/ip-masq-agent-amd64:v2.1.1"
                        ],
                        "sizeBytes": 49612505
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:b99fc3eee2a9f052f7eb4cc00f15eb12fc405fa41019baa2d6b79847ae7284a8",
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.10"
                        ],
                        "sizeBytes": 49549457
                    },
                    {
                        "names": [
                            "k8s.gcr.io/rescheduler@sha256:156cfbfd05a5a815206fd2eeb6cbdaf1596d71ea4b415d3a6c43071dd7b99450",
                            "k8s.gcr.io/rescheduler:v0.4.0"
                        ],
                        "sizeBytes": 48973149
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:db2bf53126ed1c761d5a41f24a1b82a461c85f736ff6e90542e9522be4757848",
                            "k8s.gcr.io/coredns:1.1.3"
                        ],
                        "sizeBytes": 45587362
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:cedc8fe2098dffc26d17f64061296b7aa54258a31513b6c52df271a98bb522b3",
                            "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13"
                        ],
                        "sizeBytes": 42852039
                    },
                    {
                        "names": [
                            "k8s.gcr.io/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892",
                            "k8s.gcr.io/metrics-server-amd64:v0.2.1"
                        ],
                        "sizeBytes": 42541759
                    },
                    {
                        "names": [
                            "gcr.io/google-containers/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2",
                            "gcr.io/google-containers/prometheus-to-sd:v0.4.2"
                        ],
                        "sizeBytes": 41861013
                    },
                    {
                        "names": [
                            "gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                            "gcr.io/google-containers/prometheus-to-sd:v0.5.0"
                        ],
                        "sizeBytes": 41861013
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:4f1ab957f87b94a5ec1edc26fae50da2175461f00afecf68940c4aa079bd08a4",
                            "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10"
                        ],
                        "sizeBytes": 41635309
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:45df3e8e0c551bd0c79cdba48ae6677f817971dcbd1eeed7fd1f9a35118410e4",
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13"
                        ],
                        "sizeBytes": 41372492
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "selfLink": "/api/v1/nodes/gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "uid": "84b643b7-63eb-11e9-858b-42010a800036",
                "resourceVersion": "30916",
                "creationTimestamp": "2019-04-21T04:11:20Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/fluentd-ds-ready": "true",
                    "beta.kubernetes.io/instance-type": "n1-standard-2",
                    "beta.kubernetes.io/os": "linux",
                    "cloud.google.com/gke-nodepool": "default-pool",
                    "cloud.google.com/gke-os-distribution": "cos",
                    "failure-domain.beta.kubernetes.io/region": "us-central1",
                    "failure-domain.beta.kubernetes.io/zone": "us-central1-a",
                    "kubernetes.io/hostname": "gke-k8s-demo-default-pool-bc3c4575-mzfw"
                },
                "annotations": {
                    "container.googleapis.com/instance_id": "568548187776111596",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.0.1.0/24",
                "providerID": "gce://sapient-office-218912/us-central1-a/gke-k8s-demo-default-pool-bc3c4575-mzfw"
            },
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "98868448Ki",
                    "hugepages-2Mi": "0",
                    "memory": "7658208Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "1930m",
                    "ephemeral-storage": "47093746742",
                    "hugepages-2Mi": "0",
                    "memory": "5778144Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "ReadonlyFilesystem",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:09:56Z",
                        "reason": "FilesystemIsNotReadOnly",
                        "message": "Filesystem is not read-only"
                    },
                    {
                        "type": "CorruptDockerOverlay2",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:14:57Z",
                        "reason": "CorruptDockerOverlay2",
                        "message": "docker overlay2 is functioning properly"
                    },
                    {
                        "type": "FrequentKubeletRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:14:57Z",
                        "reason": "FrequentKubeletRestart",
                        "message": "kubelet is functioning properly"
                    },
                    {
                        "type": "FrequentDockerRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:14:58Z",
                        "reason": "FrequentDockerRestart",
                        "message": "docker is functioning properly"
                    },
                    {
                        "type": "FrequentContainerdRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:14:59Z",
                        "reason": "FrequentContainerdRestart",
                        "message": "containerd is functioning properly"
                    },
                    {
                        "type": "FrequentUnregisterNetDevice",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:14:57Z",
                        "reason": "UnregisterNetDevice",
                        "message": "node is functioning properly"
                    },
                    {
                        "type": "KernelDeadlock",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:34:58Z",
                        "lastTransitionTime": "2019-04-21T04:09:56Z",
                        "reason": "KernelHasNoDeadlock",
                        "message": "kernel has no deadlock"
                    },
                    {
                        "type": "NetworkUnavailable",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T04:11:42Z",
                        "lastTransitionTime": "2019-04-21T04:11:42Z",
                        "reason": "RouteCreated",
                        "message": "RouteController created a route"
                    },
                    {
                        "type": "OutOfDisk",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:20Z",
                        "reason": "KubeletHasSufficientDisk",
                        "message": "kubelet has sufficient disk space available"
                    },
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:20Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:20Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:20Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2019-04-21T07:35:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:40Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status. AppArmor enabled"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "10.128.0.53"
                    },
                    {
                        "type": "ExternalIP",
                        "address": "35.192.184.129"
                    },
                    {
                        "type": "Hostname",
                        "address": "gke-k8s-demo-default-pool-bc3c4575-mzfw"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "daccf23813d2cb31b46c54c2672d4ece",
                    "systemUUID": "DACCF238-13D2-CB31-B46C-54C2672D4ECE",
                    "bootID": "b85644f8-866d-4dc2-976f-6ef923305829",
                    "kernelVersion": "4.14.91+",
                    "osImage": "Container-Optimized OS from Google",
                    "containerRuntimeVersion": "docker://17.3.2",
                    "kubeletVersion": "v1.11.8-gke.6",
                    "kubeProxyVersion": "v1.11.8-gke.6",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "amitvashist7/k8s-demo@sha256:e31e61218842990f3cc7245f3a451feb9fe769afe4967b382c69de3c38e3a71d",
                            "amitvashist7/k8s-demo:latest"
                        ],
                        "sizeBytes": 650935401
                    },
                    {
                        "names": [
                            "k8s.gcr.io/node-problem-detector@sha256:f95cab985c26b2f46e9bd43283e0bfa88860c14e0fb0649266babe8b65e9eb2b",
                            "k8s.gcr.io/node-problem-detector:v0.4.1"
                        ],
                        "sizeBytes": 286572743
                    },
                    {
                        "names": [
                            "gcr.io/google-samples/cassandra@sha256:7a3d20afa0a46ed073a5c587b4f37e21fa860e83c60b9c42fec1e1e739d64007",
                            "gcr.io/google-samples/cassandra:v13"
                        ],
                        "sizeBytes": 234942562
                    },
                    {
                        "names": [
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1"
                        ],
                        "sizeBytes": 223242132
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-elasticsearch@sha256:b8c94527b489fb61d3d81ce5ad7f3ddbb7be71e9620a3a36e2bede2f2e487d73",
                            "k8s.gcr.io/fluentd-elasticsearch:v2.0.4"
                        ],
                        "sizeBytes": 135716379
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-gcp-scaler@sha256:457a13df66534b94bab627c4c2dc2df0ee5153a5d0f0afd27502bd46bd8da81d",
                            "k8s.gcr.io/fluentd-gcp-scaler:0.5"
                        ],
                        "sizeBytes": 103488147
                    },
                    {
                        "names": [
                            "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                            "k8s.gcr.io/kube-proxy:v1.11.8-gke.6"
                        ],
                        "sizeBytes": 102992660
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kubernetes-dashboard-amd64@sha256:dc4026c1b595435ef5527ca598e1e9c4343076926d7d62b365c44831395adbd0",
                            "k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3"
                        ],
                        "sizeBytes": 102319441
                    },
                    {
                        "names": [
                            "k8s.gcr.io/event-exporter@sha256:7f9cd7cb04d6959b0aa960727d04fa86759008048c785397b7b0d9dff0007516",
                            "k8s.gcr.io/event-exporter:v0.2.3"
                        ],
                        "sizeBytes": 94171943
                    },
                    {
                        "names": [
                            "k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                            "k8s.gcr.io/prometheus-to-sd:v0.3.1"
                        ],
                        "sizeBytes": 88077694
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-amd64@sha256:9fae0af136ce0cf4f88393b3670f7139ffc464692060c374d2ae748e13144521",
                            "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1"
                        ],
                        "sizeBytes": 76016169
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ingress-gce-glbc-amd64@sha256:31d36bbd9c44caffa135fc78cf0737266fcf25e3cf0cd1c2fcbfbc4f7309cc52",
                            "k8s.gcr.io/ingress-gce-glbc-amd64:v1.1.1"
                        ],
                        "sizeBytes": 67801919
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-addon-manager@sha256:d53486c3a0b49ebee019932878dc44232735d5622a51dbbdcec7124199020d09",
                            "k8s.gcr.io/kube-addon-manager:v8.7"
                        ],
                        "sizeBytes": 63322109
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cpvpa-amd64@sha256:cfe7b0a11c9c8e18c87b1eb34fef9a7cbb8480a8da11fc2657f78dbf4739f869",
                            "k8s.gcr.io/cpvpa-amd64:v0.6.0"
                        ],
                        "sizeBytes": 51785854
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64@sha256:003f98d9f411ddfa6ff6d539196355e03ddd69fa4ed38c7ffb8fec6f729afe2d",
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2"
                        ],
                        "sizeBytes": 49648481
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ip-masq-agent-amd64@sha256:1ffda57d87901bc01324c82ceb2145fe6a0448d3f0dd9cb65aa76a867cd62103",
                            "k8s.gcr.io/ip-masq-agent-amd64:v2.1.1"
                        ],
                        "sizeBytes": 49612505
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:b99fc3eee2a9f052f7eb4cc00f15eb12fc405fa41019baa2d6b79847ae7284a8",
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.10"
                        ],
                        "sizeBytes": 49549457
                    },
                    {
                        "names": [
                            "k8s.gcr.io/rescheduler@sha256:156cfbfd05a5a815206fd2eeb6cbdaf1596d71ea4b415d3a6c43071dd7b99450",
                            "k8s.gcr.io/rescheduler:v0.4.0"
                        ],
                        "sizeBytes": 48973149
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:db2bf53126ed1c761d5a41f24a1b82a461c85f736ff6e90542e9522be4757848",
                            "k8s.gcr.io/coredns:1.1.3"
                        ],
                        "sizeBytes": 45587362
                    },
                    {
                        "names": [
                            "k8s.gcr.io/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892",
                            "k8s.gcr.io/metrics-server-amd64:v0.2.1"
                        ],
                        "sizeBytes": 42541759
                    },
                    {
                        "names": [
                            "gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                            "gcr.io/google-containers/prometheus-to-sd:v0.5.0"
                        ],
                        "sizeBytes": 41861013
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:4f1ab957f87b94a5ec1edc26fae50da2175461f00afecf68940c4aa079bd08a4",
                            "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10"
                        ],
                        "sizeBytes": 41635309
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:bbb2a290a568125b3b996028958eb773f33b5b87a6b37bf38a28f8b62dddb3c8",
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.10"
                        ],
                        "sizeBytes": 40372149
                    },
                    {
                        "names": [
                            "k8s.gcr.io/addon-resizer@sha256:dcec9a5c2e20b8df19f3e9eeb87d9054a9e94e71479b935d5cfdbede9ce15895",
                            "k8s.gcr.io/addon-resizer:1.7"
                        ],
                        "sizeBytes": 38983736
                    },
                    {
                        "names": [
                            "k8s.gcr.io/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d",
                            "k8s.gcr.io/addon-resizer:1.8.1"
                        ],
                        "sizeBytes": 32968591
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "selfLink": "/api/v1/nodes/gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "uid": "8528599a-63eb-11e9-858b-42010a800036",
                "resourceVersion": "30922",
                "creationTimestamp": "2019-04-21T04:11:21Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/fluentd-ds-ready": "true",
                    "beta.kubernetes.io/instance-type": "n1-standard-2",
                    "beta.kubernetes.io/os": "linux",
                    "cloud.google.com/gke-nodepool": "default-pool",
                    "cloud.google.com/gke-os-distribution": "cos",
                    "failure-domain.beta.kubernetes.io/region": "us-central1",
                    "failure-domain.beta.kubernetes.io/zone": "us-central1-a",
                    "kubernetes.io/hostname": "gke-k8s-demo-default-pool-bc3c4575-qmwj"
                },
                "annotations": {
                    "container.googleapis.com/instance_id": "4029239419630670828",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.0.2.0/24",
                "providerID": "gce://sapient-office-218912/us-central1-a/gke-k8s-demo-default-pool-bc3c4575-qmwj"
            },
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "98868448Ki",
                    "hugepages-2Mi": "0",
                    "memory": "7658200Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "1930m",
                    "ephemeral-storage": "47093746742",
                    "hugepages-2Mi": "0",
                    "memory": "5778136Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "FrequentDockerRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:14:59Z",
                        "reason": "FrequentDockerRestart",
                        "message": "docker is functioning properly"
                    },
                    {
                        "type": "FrequentContainerdRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:15:00Z",
                        "reason": "FrequentContainerdRestart",
                        "message": "containerd is functioning properly"
                    },
                    {
                        "type": "CorruptDockerOverlay2",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:14:58Z",
                        "reason": "CorruptDockerOverlay2",
                        "message": "docker overlay2 is functioning properly"
                    },
                    {
                        "type": "KernelDeadlock",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:09:57Z",
                        "reason": "KernelHasNoDeadlock",
                        "message": "kernel has no deadlock"
                    },
                    {
                        "type": "ReadonlyFilesystem",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:09:57Z",
                        "reason": "FilesystemIsNotReadOnly",
                        "message": "Filesystem is not read-only"
                    },
                    {
                        "type": "FrequentUnregisterNetDevice",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:14:58Z",
                        "reason": "UnregisterNetDevice",
                        "message": "node is functioning properly"
                    },
                    {
                        "type": "FrequentKubeletRestart",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:14:58Z",
                        "reason": "FrequentKubeletRestart",
                        "message": "kubelet is functioning properly"
                    },
                    {
                        "type": "NetworkUnavailable",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T04:11:39Z",
                        "lastTransitionTime": "2019-04-21T04:11:39Z",
                        "reason": "RouteCreated",
                        "message": "RouteController created a route"
                    },
                    {
                        "type": "OutOfDisk",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:21Z",
                        "reason": "KubeletHasSufficientDisk",
                        "message": "kubelet has sufficient disk space available"
                    },
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:21Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:21Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:21Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2019-04-21T07:35:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:41Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status. AppArmor enabled"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "10.128.0.54"
                    },
                    {
                        "type": "ExternalIP",
                        "address": "35.202.233.101"
                    },
                    {
                        "type": "Hostname",
                        "address": "gke-k8s-demo-default-pool-bc3c4575-qmwj"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "5bb533e6fe9dd610edfe0db321a52cac",
                    "systemUUID": "5BB533E6-FE9D-D610-EDFE-0DB321A52CAC",
                    "bootID": "d7975904-0a77-40b7-95e3-12d77b411aeb",
                    "kernelVersion": "4.14.91+",
                    "osImage": "Container-Optimized OS from Google",
                    "containerRuntimeVersion": "docker://17.3.2",
                    "kubeletVersion": "v1.11.8-gke.6",
                    "kubeProxyVersion": "v1.11.8-gke.6",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "amitvashist7/k8s-demo@sha256:e31e61218842990f3cc7245f3a451feb9fe769afe4967b382c69de3c38e3a71d",
                            "amitvashist7/k8s-demo:latest"
                        ],
                        "sizeBytes": 650935401
                    },
                    {
                        "names": [
                            "k8s.gcr.io/node-problem-detector@sha256:f95cab985c26b2f46e9bd43283e0bfa88860c14e0fb0649266babe8b65e9eb2b",
                            "k8s.gcr.io/node-problem-detector:v0.4.1"
                        ],
                        "sizeBytes": 286572743
                    },
                    {
                        "names": [
                            "gcr.io/google-samples/cassandra@sha256:7a3d20afa0a46ed073a5c587b4f37e21fa860e83c60b9c42fec1e1e739d64007",
                            "gcr.io/google-samples/cassandra:v13"
                        ],
                        "sizeBytes": 234942562
                    },
                    {
                        "names": [
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                            "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1"
                        ],
                        "sizeBytes": 223242132
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-elasticsearch@sha256:b8c94527b489fb61d3d81ce5ad7f3ddbb7be71e9620a3a36e2bede2f2e487d73",
                            "k8s.gcr.io/fluentd-elasticsearch:v2.0.4"
                        ],
                        "sizeBytes": 135716379
                    },
                    {
                        "names": [
                            "k8s.gcr.io/fluentd-gcp-scaler@sha256:457a13df66534b94bab627c4c2dc2df0ee5153a5d0f0afd27502bd46bd8da81d",
                            "k8s.gcr.io/fluentd-gcp-scaler:0.5"
                        ],
                        "sizeBytes": 103488147
                    },
                    {
                        "names": [
                            "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                            "k8s.gcr.io/kube-proxy:v1.11.8-gke.6"
                        ],
                        "sizeBytes": 102992660
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kubernetes-dashboard-amd64@sha256:dc4026c1b595435ef5527ca598e1e9c4343076926d7d62b365c44831395adbd0",
                            "k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3"
                        ],
                        "sizeBytes": 102319441
                    },
                    {
                        "names": [
                            "k8s.gcr.io/event-exporter@sha256:7f9cd7cb04d6959b0aa960727d04fa86759008048c785397b7b0d9dff0007516",
                            "k8s.gcr.io/event-exporter:v0.2.3"
                        ],
                        "sizeBytes": 94171943
                    },
                    {
                        "names": [
                            "k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                            "k8s.gcr.io/prometheus-to-sd:v0.3.1"
                        ],
                        "sizeBytes": 88077694
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-amd64@sha256:9fae0af136ce0cf4f88393b3670f7139ffc464692060c374d2ae748e13144521",
                            "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1"
                        ],
                        "sizeBytes": 76016169
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ingress-gce-glbc-amd64@sha256:31d36bbd9c44caffa135fc78cf0737266fcf25e3cf0cd1c2fcbfbc4f7309cc52",
                            "k8s.gcr.io/ingress-gce-glbc-amd64:v1.1.1"
                        ],
                        "sizeBytes": 67801919
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-addon-manager@sha256:d53486c3a0b49ebee019932878dc44232735d5622a51dbbdcec7124199020d09",
                            "k8s.gcr.io/kube-addon-manager:v8.7"
                        ],
                        "sizeBytes": 63322109
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cpvpa-amd64@sha256:cfe7b0a11c9c8e18c87b1eb34fef9a7cbb8480a8da11fc2657f78dbf4739f869",
                            "k8s.gcr.io/cpvpa-amd64:v0.6.0"
                        ],
                        "sizeBytes": 51785854
                    },
                    {
                        "names": [
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64@sha256:003f98d9f411ddfa6ff6d539196355e03ddd69fa4ed38c7ffb8fec6f729afe2d",
                            "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2"
                        ],
                        "sizeBytes": 49648481
                    },
                    {
                        "names": [
                            "k8s.gcr.io/ip-masq-agent-amd64@sha256:1ffda57d87901bc01324c82ceb2145fe6a0448d3f0dd9cb65aa76a867cd62103",
                            "k8s.gcr.io/ip-masq-agent-amd64:v2.1.1"
                        ],
                        "sizeBytes": 49612505
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:b99fc3eee2a9f052f7eb4cc00f15eb12fc405fa41019baa2d6b79847ae7284a8",
                            "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.10"
                        ],
                        "sizeBytes": 49549457
                    },
                    {
                        "names": [
                            "k8s.gcr.io/rescheduler@sha256:156cfbfd05a5a815206fd2eeb6cbdaf1596d71ea4b415d3a6c43071dd7b99450",
                            "k8s.gcr.io/rescheduler:v0.4.0"
                        ],
                        "sizeBytes": 48973149
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:db2bf53126ed1c761d5a41f24a1b82a461c85f736ff6e90542e9522be4757848",
                            "k8s.gcr.io/coredns:1.1.3"
                        ],
                        "sizeBytes": 45587362
                    },
                    {
                        "names": [
                            "k8s.gcr.io/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892",
                            "k8s.gcr.io/metrics-server-amd64:v0.2.1"
                        ],
                        "sizeBytes": 42541759
                    },
                    {
                        "names": [
                            "gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                            "gcr.io/google-containers/prometheus-to-sd:v0.5.0"
                        ],
                        "sizeBytes": 41861013
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:4f1ab957f87b94a5ec1edc26fae50da2175461f00afecf68940c4aa079bd08a4",
                            "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10"
                        ],
                        "sizeBytes": 41635309
                    },
                    {
                        "names": [
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:bbb2a290a568125b3b996028958eb773f33b5b87a6b37bf38a28f8b62dddb3c8",
                            "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.10"
                        ],
                        "sizeBytes": 40372149
                    },
                    {
                        "names": [
                            "k8s.gcr.io/addon-resizer@sha256:dcec9a5c2e20b8df19f3e9eeb87d9054a9e94e71479b935d5cfdbede9ce15895",
                            "k8s.gcr.io/addon-resizer:1.7"
                        ],
                        "sizeBytes": 38983736
                    },
                    {
                        "names": [
                            "k8s.gcr.io/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d",
                            "k8s.gcr.io/addon-resizer:1.8.1"
                        ],
                        "sizeBytes": 32968591
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "602"
    },
    "items": []
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "30938"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "30938"
    },
    "items": [
        {
            "metadata": {
                "name": "default-http-backend",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/default-http-backend",
                "uid": "7e1c070e-63eb-11e9-858b-42010a800036",
                "resourceVersion": "286",
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "glbc",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "GLBCDefaultBackend"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"glbc\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"GLBCDefaultBackend\"},\"name\":\"default-http-backend\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":8080}],\"selector\":{\"k8s-app\":\"glbc\"},\"type\":\"NodePort\"}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "http",
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": 8080,
                        "nodePort": 31132
                    }
                ],
                "selector": {
                    "k8s-app": "glbc"
                },
                "clusterIP": "10.3.243.249",
                "type": "NodePort",
                "sessionAffinity": "None",
                "externalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "heapster",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/heapster",
                "uid": "7e51f0de-63eb-11e9-858b-42010a800036",
                "resourceVersion": "305",
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "Heapster"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"Heapster\"},\"name\":\"heapster\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":80,\"targetPort\":8082}],\"selector\":{\"k8s-app\":\"heapster\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": 8082
                    }
                ],
                "selector": {
                    "k8s-app": "heapster"
                },
                "clusterIP": "10.3.248.60",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "7e5a4535-63eb-11e9-858b-42010a800036",
                "resourceVersion": "308",
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"kube-dns\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"KubeDNS\"},\"name\":\"kube-dns\",\"namespace\":\"kube-system\"},\"spec\":{\"clusterIP\":\"10.3.240.10\",\"ports\":[{\"name\":\"dns\",\"port\":53,\"protocol\":\"UDP\"},{\"name\":\"dns-tcp\",\"port\":53,\"protocol\":\"TCP\"}],\"selector\":{\"k8s-app\":\"kube-dns\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.3.240.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "metrics-server",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/metrics-server",
                "uid": "800dc90a-63eb-11e9-858b-42010a800036",
                "resourceVersion": "386",
                "creationTimestamp": "2019-04-21T04:11:12Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "Metrics-server"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"Metrics-server\"},\"name\":\"metrics-server\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":443,\"protocol\":\"TCP\",\"targetPort\":\"https\"}],\"selector\":{\"k8s-app\":\"metrics-server\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": "https"
                    }
                ],
                "selector": {
                    "k8s-app": "metrics-server"
                },
                "clusterIP": "10.3.247.188",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "30938"
    },
    "items": [
        {
            "metadata": {
                "name": "fluentd-gcp-v3.2.0",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/fluentd-gcp-v3.2.0",
                "uid": "7efe705b-63eb-11e9-858b-42010a800036",
                "resourceVersion": "810",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:11Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "fluentd-gcp",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v3.2.0"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "2",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"fluentd-gcp\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v3.2.0\"},\"name\":\"fluentd-gcp-v3.2.0\",\"namespace\":\"kube-system\"},\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"fluentd-gcp\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v3.2.0\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"STACKDRIVER_METADATA_AGENT_URL\",\"value\":\"http://$(NODE_NAME):8799\"}],\"image\":\"gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1\",\"livenessProbe\":{\"exec\":{\"command\":[\"/bin/sh\",\"-c\",\"LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\\n  exit 1;\\nfi; touch -d \\\"${STUCK_THRESHOLD_SECONDS} seconds ago\\\" /tmp/marker-stuck; if [[ -z \\\"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)\\\" ]]; then\\n  rm -rf /var/log/fluentd-buffers;\\n  exit 1;\\nfi; touch -d \\\"${LIVENESS_THRESHOLD_SECONDS} seconds ago\\\" /tmp/marker-liveness; if [[ -z \\\"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)\\\" ]]; then\\n  exit 1;\\nfi;\\n\"]},\"initialDelaySeconds\":600,\"periodSeconds\":60},\"name\":\"fluentd-gcp\",\"volumeMounts\":[{\"mountPath\":\"/var/log\",\"name\":\"varlog\"},{\"mountPath\":\"/var/lib/docker/containers\",\"name\":\"varlibdockercontainers\",\"readOnly\":true},{\"mountPath\":\"/etc/google-fluentd/config.d\",\"name\":\"config-volume\"}]},{\"command\":[\"/monitor\",\"--stackdriver-prefix=container.googleapis.com/internal/addons\",\"--api-override=https://monitoring.googleapis.com/\",\"--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count\",\"--pod-id=$(POD_NAME)\",\"--namespace-id=$(POD_NAMESPACE)\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/prometheus-to-sd:v0.3.1\",\"name\":\"prometheus-to-sd-exporter\"}],\"dnsPolicy\":\"Default\",\"nodeSelector\":{\"beta.kubernetes.io/fluentd-ds-ready\":\"true\"},\"priorityClassName\":\"system-node-critical\",\"serviceAccountName\":\"fluentd-gcp\",\"terminationGracePeriodSeconds\":30,\"tolerations\":[{\"effect\":\"NoExecute\",\"operator\":\"Exists\"},{\"effect\":\"NoSchedule\",\"operator\":\"Exists\"}],\"volumes\":[{\"hostPath\":{\"path\":\"/var/log\"},\"name\":\"varlog\"},{\"hostPath\":{\"path\":\"/var/lib/docker/containers\"},\"name\":\"varlibdockercontainers\"},{\"configMap\":{\"name\":\"fluentd-gcp-config-old-v1.2.5\"},\"name\":\"config-volume\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"}}}\n"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "fluentd-gcp",
                        "kubernetes.io/cluster-service": "true",
                        "version": "v3.2.0"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "fluentd-gcp",
                            "kubernetes.io/cluster-service": "true",
                            "version": "v3.2.0"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "varlog",
                                "hostPath": {
                                    "path": "/var/log",
                                    "type": ""
                                }
                            },
                            {
                                "name": "varlibdockercontainers",
                                "hostPath": {
                                    "path": "/var/lib/docker/containers",
                                    "type": ""
                                }
                            },
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "fluentd-gcp-config-old-v1.2.5",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "fluentd-gcp",
                                "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "STACKDRIVER_METADATA_AGENT_URL",
                                        "value": "http://$(NODE_NAME):8799"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "500Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "200Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "varlog",
                                        "mountPath": "/var/log"
                                    },
                                    {
                                        "name": "varlibdockercontainers",
                                        "readOnly": true,
                                        "mountPath": "/var/lib/docker/containers"
                                    },
                                    {
                                        "name": "config-volume",
                                        "mountPath": "/etc/google-fluentd/config.d"
                                    }
                                ],
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-c",
                                            "LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; touch -d \"${STUCK_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-stuck; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)\" ]]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; touch -d \"${LIVENESS_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-liveness; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)\" ]]; then\n  exit 1;\nfi;\n"
                                        ]
                                    },
                                    "initialDelaySeconds": 600,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 60,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prometheus-to-sd-exporter",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "beta.kubernetes.io/fluentd-ds-ready": "true"
                        },
                        "serviceAccountName": "fluentd-gcp",
                        "serviceAccount": "fluentd-gcp",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists",
                                "effect": "NoExecute"
                            },
                            {
                                "operator": "Exists",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 3,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 3,
                "numberReady": 3,
                "observedGeneration": 2,
                "updatedNumberScheduled": 3,
                "numberAvailable": 3
            }
        },
        {
            "metadata": {
                "name": "metadata-proxy-v0.1",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/metadata-proxy-v0.1",
                "uid": "7f2f6bdb-63eb-11e9-858b-42010a800036",
                "resourceVersion": "366",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:11Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "metadata-proxy",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v0.1"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"metadata-proxy\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v0.1\"},\"name\":\"metadata-proxy-v0.1\",\"namespace\":\"kube-system\"},\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"metadata-proxy\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v0.1\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/metadata-proxy:v0.1.10\",\"name\":\"metadata-proxy\",\"resources\":{\"limits\":{\"cpu\":\"30m\",\"memory\":\"25Mi\"},\"requests\":{\"cpu\":\"30m\",\"memory\":\"25Mi\"}},\"securityContext\":{\"privileged\":true}},{\"command\":[\"/monitor\",\"--stackdriver-prefix=container.googleapis.com/internal/addons\",\"--api-override=https://monitoring.googleapis.com/\",\"--source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count\",\"--pod-id=$(POD_NAME)\",\"--namespace-id=$(POD_NAMESPACE)\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/prometheus-to-sd:v0.3.1\",\"name\":\"prometheus-to-sd-exporter\",\"resources\":{\"limits\":{\"cpu\":\"2m\",\"memory\":\"20Mi\"},\"requests\":{\"cpu\":\"2m\",\"memory\":\"20Mi\"}}}],\"dnsPolicy\":\"Default\",\"hostNetwork\":true,\"nodeSelector\":{\"beta.kubernetes.io/metadata-proxy-ready\":\"true\"},\"priorityClassName\":\"system-node-critical\",\"serviceAccountName\":\"metadata-proxy\",\"terminationGracePeriodSeconds\":30,\"tolerations\":[{\"effect\":\"NoExecute\",\"operator\":\"Exists\"},{\"effect\":\"NoSchedule\",\"operator\":\"Exists\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"}}}\n"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metadata-proxy",
                        "kubernetes.io/cluster-service": "true",
                        "version": "v0.1"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metadata-proxy",
                            "kubernetes.io/cluster-service": "true",
                            "version": "v0.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "metadata-proxy",
                                "image": "k8s.gcr.io/metadata-proxy:v0.1.10",
                                "resources": {
                                    "limits": {
                                        "cpu": "30m",
                                        "memory": "25Mi"
                                    },
                                    "requests": {
                                        "cpu": "30m",
                                        "memory": "25Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            },
                            {
                                "name": "prometheus-to-sd-exporter",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "2m",
                                        "memory": "20Mi"
                                    },
                                    "requests": {
                                        "cpu": "2m",
                                        "memory": "20Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "beta.kubernetes.io/metadata-proxy-ready": "true"
                        },
                        "serviceAccountName": "metadata-proxy",
                        "serviceAccount": "metadata-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists",
                                "effect": "NoExecute"
                            },
                            {
                                "operator": "Exists",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 0,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 0,
                "numberReady": 0,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "nvidia-gpu-device-plugin",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/nvidia-gpu-device-plugin",
                "uid": "86345704-63eb-11e9-858b-42010a800036",
                "resourceVersion": "493",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:23Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "nvidia-gpu-device-plugin"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"nvidia-gpu-device-plugin\"},\"name\":\"nvidia-gpu-device-plugin\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"nvidia-gpu-device-plugin\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"nvidia-gpu-device-plugin\"}},\"spec\":{\"affinity\":{\"nodeAffinity\":{\"requiredDuringSchedulingIgnoredDuringExecution\":{\"nodeSelectorTerms\":[{\"matchExpressions\":[{\"key\":\"cloud.google.com/gke-accelerator\",\"operator\":\"Exists\"}]}]}}},\"containers\":[{\"command\":[\"/usr/bin/nvidia-gpu-device-plugin\",\"-logtostderr\"],\"image\":\"k8s.gcr.io/nvidia-gpu-device-plugin@sha256:0842734032018be107fa2490c98156992911e3e1f2a21e059ff0105b07dd8e9e\",\"name\":\"nvidia-gpu-device-plugin\",\"resources\":{\"limits\":{\"cpu\":\"50m\",\"memory\":\"10Mi\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"10Mi\"}},\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/device-plugin\",\"name\":\"device-plugin\"},{\"mountPath\":\"/dev\",\"name\":\"dev\"}]}],\"priorityClassName\":\"system-node-critical\",\"tolerations\":[{\"effect\":\"NoExecute\",\"operator\":\"Exists\"},{\"effect\":\"NoSchedule\",\"operator\":\"Exists\"}],\"volumes\":[{\"hostPath\":{\"path\":\"/var/lib/kubelet/device-plugins\"},\"name\":\"device-plugin\"},{\"hostPath\":{\"path\":\"/dev\"},\"name\":\"dev\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"}}}\n"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "nvidia-gpu-device-plugin"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "nvidia-gpu-device-plugin"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "device-plugin",
                                "hostPath": {
                                    "path": "/var/lib/kubelet/device-plugins",
                                    "type": ""
                                }
                            },
                            {
                                "name": "dev",
                                "hostPath": {
                                    "path": "/dev",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "nvidia-gpu-device-plugin",
                                "image": "k8s.gcr.io/nvidia-gpu-device-plugin@sha256:0842734032018be107fa2490c98156992911e3e1f2a21e059ff0105b07dd8e9e",
                                "command": [
                                    "/usr/bin/nvidia-gpu-device-plugin",
                                    "-logtostderr"
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "10Mi"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "10Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "device-plugin",
                                        "mountPath": "/device-plugin"
                                    },
                                    {
                                        "name": "dev",
                                        "mountPath": "/dev"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "affinity": {
                            "nodeAffinity": {
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                    "nodeSelectorTerms": [
                                        {
                                            "matchExpressions": [
                                                {
                                                    "key": "cloud.google.com/gke-accelerator",
                                                    "operator": "Exists"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists",
                                "effect": "NoExecute"
                            },
                            {
                                "operator": "Exists",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 0,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 0,
                "numberReady": 0,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "prometheus-to-sd",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/prometheus-to-sd",
                "uid": "7f222666-63eb-11e9-858b-42010a800036",
                "resourceVersion": "533",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:11Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\"},\"name\":\"prometheus-to-sd\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"prometheus-to-sd\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"prometheus-to-sd\"}},\"spec\":{\"containers\":[{\"command\":[\"/monitor\",\"--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\\u0026metricsPrefix=container.googleapis.com/internal/addons\",\"--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total\",\"--stackdriver-prefix=container.googleapis.com/internal/nodes\",\"--api-override=https://monitoring.googleapis.com/\"],\"image\":\"gcr.io/google-containers/prometheus-to-sd:v0.5.0\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"prometheus-to-sd\",\"resources\":{\"limits\":{\"cpu\":\"3m\",\"memory\":\"20Mi\"},\"requests\":{\"cpu\":\"1m\",\"memory\":\"20Mi\"}}}],\"hostNetwork\":true,\"priorityClassName\":\"system-node-critical\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}]}}}}\n"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "prometheus-to-sd"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "prometheus-to-sd"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "prometheus-to-sd",
                                "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                                "command": [
                                    "/monitor",
                                    "--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\u0026metricsPrefix=container.googleapis.com/internal/addons",
                                    "--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total",
                                    "--stackdriver-prefix=container.googleapis.com/internal/nodes",
                                    "--api-override=https://monitoring.googleapis.com/"
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "3m",
                                        "memory": "20Mi"
                                    },
                                    "requests": {
                                        "cpu": "1m",
                                        "memory": "20Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "OnDelete"
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 3,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 3,
                "numberReady": 3,
                "observedGeneration": 1,
                "updatedNumberScheduled": 3,
                "numberAvailable": 3
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "30938"
    },
    "items": [
        {
            "metadata": {
                "name": "event-exporter-v0.2.3",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/event-exporter-v0.2.3",
                "uid": "7ed0d78f-63eb-11e9-858b-42010a800036",
                "resourceVersion": "681",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "event-exporter",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v0.2.3"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"event-exporter\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v0.2.3\"},\"name\":\"event-exporter-v0.2.3\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"event-exporter\",\"version\":\"v0.2.3\"}},\"spec\":{\"containers\":[{\"command\":[\"/event-exporter\",\"-sink-opts=-stackdriver-resource-model=old\"],\"image\":\"k8s.gcr.io/event-exporter:v0.2.3\",\"name\":\"event-exporter\"},{\"command\":[\"/monitor\",\"--stackdriver-prefix=container.googleapis.com/internal/addons\",\"--api-override=https://monitoring.googleapis.com/\",\"--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count\",\"--pod-id=$(POD_NAME)\",\"--namespace-id=$(POD_NAMESPACE)\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/prometheus-to-sd:v0.3.1\",\"name\":\"prometheus-to-sd-exporter\"}],\"serviceAccountName\":\"event-exporter-sa\",\"terminationGracePeriodSeconds\":30,\"volumes\":[{\"hostPath\":{\"path\":\"/etc/ssl/certs\"},\"name\":\"ssl-certs\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "event-exporter",
                        "version": "v0.2.3"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "event-exporter",
                            "version": "v0.2.3"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "ssl-certs",
                                "hostPath": {
                                    "path": "/etc/ssl/certs",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "event-exporter",
                                "image": "k8s.gcr.io/event-exporter:v0.2.3",
                                "command": [
                                    "/event-exporter",
                                    "-sink-opts=-stackdriver-resource-model=old"
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prometheus-to-sd-exporter",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "event-exporter-sa",
                        "serviceAccount": "event-exporter-sa",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 2,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:47Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:10Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"event-exporter-v0.2.3-85644fcdf\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-scaler",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/fluentd-gcp-scaler",
                "uid": "8659b3f4-63eb-11e9-858b-42010a800036",
                "resourceVersion": "673",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:23Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "fluentd-gcp-scaler",
                    "version": "v0.5.0"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"fluentd-gcp-scaler\",\"version\":\"v0.5.0\"},\"name\":\"fluentd-gcp-scaler\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"fluentd-gcp-scaler\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"fluentd-gcp-scaler\"}},\"spec\":{\"containers\":[{\"command\":[\"/scaler.sh\",\"--ds-name=fluentd-gcp-v3.2.0\",\"--scaling-policy=fluentd-gcp-scaling-policy\"],\"env\":[{\"name\":\"CPU_REQUEST\",\"value\":\"100m\"},{\"name\":\"MEMORY_REQUEST\",\"value\":\"200Mi\"},{\"name\":\"CPU_LIMIT\",\"value\":\"1000m\"},{\"name\":\"MEMORY_LIMIT\",\"value\":\"500Mi\"}],\"image\":\"k8s.gcr.io/fluentd-gcp-scaler:0.5\",\"name\":\"fluentd-gcp-scaler\"}],\"serviceAccountName\":\"fluentd-gcp-scaler\"}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "fluentd-gcp-scaler"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "fluentd-gcp-scaler"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "fluentd-gcp-scaler",
                                "image": "k8s.gcr.io/fluentd-gcp-scaler:0.5",
                                "command": [
                                    "/scaler.sh",
                                    "--ds-name=fluentd-gcp-v3.2.0",
                                    "--scaling-policy=fluentd-gcp-scaling-policy"
                                ],
                                "env": [
                                    {
                                        "name": "CPU_REQUEST",
                                        "value": "100m"
                                    },
                                    {
                                        "name": "MEMORY_REQUEST",
                                        "value": "200Mi"
                                    },
                                    {
                                        "name": "CPU_LIMIT",
                                        "value": "1000m"
                                    },
                                    {
                                        "name": "MEMORY_LIMIT",
                                        "value": "500Mi"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "fluentd-gcp-scaler",
                        "serviceAccount": "fluentd-gcp-scaler",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:47Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:47Z",
                        "lastTransitionTime": "2019-04-21T04:11:23Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"fluentd-gcp-scaler-8b674f786\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.6.0-beta.1",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/heapster-v1.6.0-beta.1",
                "uid": "7e2cfef9-63eb-11e9-858b-42010a800036",
                "resourceVersion": "747",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "heapster",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v1.6.0-beta.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "2",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"heapster\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v1.6.0-beta.1\"},\"name\":\"heapster-v1.6.0-beta.1\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"k8s-app\":\"heapster\",\"version\":\"v1.6.0-beta.1\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\",\"seccomp.security.alpha.kubernetes.io/pod\":\"docker/default\"},\"labels\":{\"k8s-app\":\"heapster\",\"version\":\"v1.6.0-beta.1\"}},\"spec\":{\"containers\":[{\"command\":[\"/heapster\",\"--source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id\",\"--sink=stackdriver:?cluster_name=k8s-demo\\u0026use_old_resources=true\\u0026use_new_resources=false\\u0026min_interval_sec=100\\u0026batch_export_timeout_sec=110\\u0026cluster_location=us-central1-a\"],\"image\":\"k8s.gcr.io/heapster-amd64:v1.6.0-beta.1\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8082,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":180,\"timeoutSeconds\":5},\"name\":\"heapster\"},{\"command\":[\"/monitor\",\"--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count\",\"--stackdriver-prefix=container.googleapis.com/internal/addons\",\"--api-override=https://monitoring.googleapis.com/\",\"--pod-id=$(POD_NAME)\",\"--namespace-id=$(POD_NAMESPACE)\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/prometheus-to-sd:v0.3.1\",\"name\":\"prom-to-sd\"},{\"command\":[\"/pod_nanny\",\"--config-dir=/etc/config\",\"--cpu=80m\",\"--extra-cpu=0.5m\",\"--memory=140Mi\",\"--extra-memory=4Mi\",\"--threshold=5\",\"--deployment=heapster-v1.6.0-beta.1\",\"--container=heapster\",\"--poll-period=300000\",\"--estimator=exponential\"],\"env\":[{\"name\":\"MY_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"MY_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/addon-resizer:1.8.1\",\"name\":\"heapster-nanny\",\"resources\":{\"limits\":{\"cpu\":\"50m\",\"memory\":\"92960Ki\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"92960Ki\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"heapster-config-volume\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"heapster\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"configMap\":{\"name\":\"heapster-config\"},\"name\":\"heapster-config-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "heapster",
                        "version": "v1.6.0-beta.1"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "heapster",
                            "version": "v1.6.0-beta.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "heapster-config-volume",
                                "configMap": {
                                    "name": "heapster-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "heapster",
                                "image": "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1",
                                "command": [
                                    "/heapster",
                                    "--source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id",
                                    "--sink=stackdriver:?cluster_name=k8s-demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110\u0026cluster_location=us-central1-a"
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "88m",
                                        "memory": "204Mi"
                                    },
                                    "requests": {
                                        "cpu": "88m",
                                        "memory": "204Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8082,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 180,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prom-to-sd",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "heapster-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=80m",
                                    "--extra-cpu=0.5m",
                                    "--memory=140Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.6.0-beta.1",
                                    "--container=heapster",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "heapster-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "heapster",
                        "serviceAccount": "heapster",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 1
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 2147483647
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:09Z",
                        "lastTransitionTime": "2019-04-21T04:11:09Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/kube-dns",
                "uid": "7e6e65f0-63eb-11e9-858b-42010a800036",
                "resourceVersion": "783",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"kube-dns\",\"kubernetes.io/cluster-service\":\"true\"},\"name\":\"kube-dns\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"kube-dns\"}},\"strategy\":{\"rollingUpdate\":{\"maxSurge\":\"10%\",\"maxUnavailable\":0}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\",\"seccomp.security.alpha.kubernetes.io/pod\":\"docker/default\"},\"labels\":{\"k8s-app\":\"kube-dns\"}},\"spec\":{\"containers\":[{\"args\":[\"--domain=cluster.local.\",\"--dns-port=10053\",\"--config-dir=/kube-dns-config\",\"--v=2\"],\"env\":[{\"name\":\"PROMETHEUS_PORT\",\"value\":\"10055\"}],\"image\":\"k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13\",\"livenessProbe\":{\"failureThreshold\":5,\"httpGet\":{\"path\":\"/healthcheck/kubedns\",\"port\":10054,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"kubedns\",\"ports\":[{\"containerPort\":10053,\"name\":\"dns-local\",\"protocol\":\"UDP\"},{\"containerPort\":10053,\"name\":\"dns-tcp-local\",\"protocol\":\"TCP\"},{\"containerPort\":10055,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readiness\",\"port\":8081,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":3,\"timeoutSeconds\":5},\"resources\":{\"limits\":{\"memory\":\"170Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"70Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/kube-dns-config\",\"name\":\"kube-dns-config\"}]},{\"args\":[\"-v=2\",\"-logtostderr\",\"-configDir=/etc/k8s/dns/dnsmasq-nanny\",\"-restartDnsmasq=true\",\"--\",\"-k\",\"--cache-size=1000\",\"--no-negcache\",\"--log-facility=-\",\"--server=/cluster.local/127.0.0.1#10053\",\"--server=/in-addr.arpa/127.0.0.1#10053\",\"--server=/ip6.arpa/127.0.0.1#10053\"],\"image\":\"k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13\",\"livenessProbe\":{\"failureThreshold\":5,\"httpGet\":{\"path\":\"/healthcheck/dnsmasq\",\"port\":10054,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"dnsmasq\",\"ports\":[{\"containerPort\":53,\"name\":\"dns\",\"protocol\":\"UDP\"},{\"containerPort\":53,\"name\":\"dns-tcp\",\"protocol\":\"TCP\"}],\"resources\":{\"requests\":{\"cpu\":\"150m\",\"memory\":\"20Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/k8s/dns/dnsmasq-nanny\",\"name\":\"kube-dns-config\"}]},{\"args\":[\"--v=2\",\"--logtostderr\",\"--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV\",\"--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV\"],\"image\":\"k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13\",\"livenessProbe\":{\"failureThreshold\":5,\"httpGet\":{\"path\":\"/metrics\",\"port\":10054,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"sidecar\",\"ports\":[{\"containerPort\":10054,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"resources\":{\"requests\":{\"cpu\":\"10m\",\"memory\":\"20Mi\"}}},{\"command\":[\"/monitor\",\"--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits\",\"--stackdriver-prefix=container.googleapis.com/internal/addons\",\"--api-override=https://monitoring.googleapis.com/\",\"--pod-id=$(POD_NAME)\",\"--namespace-id=$(POD_NAMESPACE)\",\"--v=2\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"gcr.io/google-containers/prometheus-to-sd:v0.4.2\",\"name\":\"prometheus-to-sd\"}],\"dnsPolicy\":\"Default\",\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"kube-dns\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"configMap\":{\"name\":\"kube-dns\",\"optional\":true},\"name\":\"kube-dns-config\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-dns-config",
                                "configMap": {
                                    "name": "kube-dns",
                                    "defaultMode": 420,
                                    "optional": true
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kubedns",
                                "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                                "args": [
                                    "--domain=cluster.local.",
                                    "--dns-port=10053",
                                    "--config-dir=/kube-dns-config",
                                    "--v=2"
                                ],
                                "ports": [
                                    {
                                        "name": "dns-local",
                                        "containerPort": 10053,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp-local",
                                        "containerPort": 10053,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 10055,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "PROMETHEUS_PORT",
                                        "value": "10055"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kube-dns-config",
                                        "mountPath": "/kube-dns-config"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthcheck/kubedns",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readiness",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "dnsmasq",
                                "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                                "args": [
                                    "-v=2",
                                    "-logtostderr",
                                    "-configDir=/etc/k8s/dns/dnsmasq-nanny",
                                    "-restartDnsmasq=true",
                                    "--",
                                    "-k",
                                    "--cache-size=1000",
                                    "--no-negcache",
                                    "--log-facility=-",
                                    "--server=/cluster.local/127.0.0.1#10053",
                                    "--server=/in-addr.arpa/127.0.0.1#10053",
                                    "--server=/ip6.arpa/127.0.0.1#10053"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "150m",
                                        "memory": "20Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kube-dns-config",
                                        "mountPath": "/etc/k8s/dns/dnsmasq-nanny"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthcheck/dnsmasq",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "sidecar",
                                "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                                "args": [
                                    "--v=2",
                                    "--logtostderr",
                                    "--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV",
                                    "--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"
                                ],
                                "ports": [
                                    {
                                        "name": "metrics",
                                        "containerPort": 10054,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/metrics",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prometheus-to-sd",
                                "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                                "command": [
                                    "/monitor",
                                    "--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)",
                                    "--v=2"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "serviceAccountName": "kube-dns",
                        "serviceAccount": "kube-dns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 0,
                        "maxSurge": "10%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 2147483647
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 2,
                "updatedReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:12:01Z",
                        "lastTransitionTime": "2019-04-21T04:12:01Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "kube-dns-autoscaler",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/kube-dns-autoscaler",
                "uid": "7e987595-63eb-11e9-858b-42010a800036",
                "resourceVersion": "650",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "kube-dns-autoscaler",
                    "kubernetes.io/cluster-service": "true"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"kube-dns-autoscaler\",\"kubernetes.io/cluster-service\":\"true\"},\"name\":\"kube-dns-autoscaler\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"kube-dns-autoscaler\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\",\"seccomp.security.alpha.kubernetes.io/pod\":\"docker/default\"},\"labels\":{\"k8s-app\":\"kube-dns-autoscaler\"}},\"spec\":{\"containers\":[{\"command\":[\"/cluster-proportional-autoscaler\",\"--namespace=kube-system\",\"--configmap=kube-dns-autoscaler\",\"--target=Deployment/kube-dns\",\"--default-params={\\\"linear\\\":{\\\"coresPerReplica\\\":256,\\\"nodesPerReplica\\\":16,\\\"preventSinglePointFailure\\\":true}}\",\"--logtostderr=true\",\"--v=2\"],\"image\":\"k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2\",\"name\":\"autoscaler\",\"resources\":{\"requests\":{\"cpu\":\"20m\",\"memory\":\"10Mi\"}}}],\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"kube-dns-autoscaler\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns-autoscaler"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns-autoscaler"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "autoscaler",
                                "image": "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2",
                                "command": [
                                    "/cluster-proportional-autoscaler",
                                    "--namespace=kube-system",
                                    "--configmap=kube-dns-autoscaler",
                                    "--target=Deployment/kube-dns",
                                    "--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}",
                                    "--logtostderr=true",
                                    "--v=2"
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "20m",
                                        "memory": "10Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kube-dns-autoscaler",
                        "serviceAccount": "kube-dns-autoscaler",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:46Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:46Z",
                        "lastTransitionTime": "2019-04-21T04:11:10Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"kube-dns-autoscaler-67c97c87fb\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "l7-default-backend",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/l7-default-backend",
                "uid": "7e06de58-63eb-11e9-858b-42010a800036",
                "resourceVersion": "734",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "glbc",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "GLBC"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"glbc\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"GLBC\"},\"name\":\"l7-default-backend\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"glbc\"}},\"template\":{\"metadata\":{\"annotations\":{\"seccomp.security.alpha.kubernetes.io/pod\":\"docker/default\"},\"labels\":{\"k8s-app\":\"glbc\",\"name\":\"glbc\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/defaultbackend-amd64:1.5\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":30,\"timeoutSeconds\":5},\"name\":\"default-http-backend\",\"ports\":[{\"containerPort\":8080}],\"resources\":{\"limits\":{\"cpu\":\"10m\",\"memory\":\"20Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"20Mi\"}}}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "glbc"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "glbc",
                            "name": "glbc"
                        },
                        "annotations": {
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "default-http-backend",
                                "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:54Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:54Z",
                        "lastTransitionTime": "2019-04-21T04:11:09Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"l7-default-backend-7ff48cffd7\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "metrics-server-v0.2.1",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/metrics-server-v0.2.1",
                "uid": "7fb8cb71-63eb-11e9-858b-42010a800036",
                "resourceVersion": "704",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:12Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "metrics-server",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v0.2.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "2",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"metrics-server\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v0.2.1\"},\"name\":\"metrics-server-v0.2.1\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"metrics-server\",\"version\":\"v0.2.1\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\",\"seccomp.security.alpha.kubernetes.io/pod\":\"docker/default\"},\"labels\":{\"k8s-app\":\"metrics-server\",\"version\":\"v0.2.1\"},\"name\":\"metrics-server\"},\"spec\":{\"containers\":[{\"command\":[\"/metrics-server\",\"--source=kubernetes.summary_api:''\"],\"image\":\"k8s.gcr.io/metrics-server-amd64:v0.2.1\",\"name\":\"metrics-server\",\"ports\":[{\"containerPort\":443,\"name\":\"https\",\"protocol\":\"TCP\"}]},{\"command\":[\"/pod_nanny\",\"--config-dir=/etc/config\",\"--cpu=40m\",\"--extra-cpu=0.5m\",\"--memory=40Mi\",\"--extra-memory=4Mi\",\"--threshold=5\",\"--deployment=metrics-server-v0.2.1\",\"--container=metrics-server\",\"--poll-period=300000\",\"--estimator=exponential\"],\"env\":[{\"name\":\"MY_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"MY_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"k8s.gcr.io/addon-resizer:1.8.1\",\"name\":\"metrics-server-nanny\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"5m\",\"memory\":\"50Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"metrics-server-config-volume\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"metrics-server\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"configMap\":{\"name\":\"metrics-server-config\"},\"name\":\"metrics-server-config-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metrics-server",
                        "version": "v0.2.1"
                    }
                },
                "template": {
                    "metadata": {
                        "name": "metrics-server",
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metrics-server",
                            "version": "v0.2.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "metrics-server-config-volume",
                                "configMap": {
                                    "name": "metrics-server-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "metrics-server",
                                "image": "k8s.gcr.io/metrics-server-amd64:v0.2.1",
                                "command": [
                                    "/metrics-server",
                                    "--source=kubernetes.summary_api:''"
                                ],
                                "ports": [
                                    {
                                        "name": "https",
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "48m",
                                        "memory": "104Mi"
                                    },
                                    "requests": {
                                        "cpu": "48m",
                                        "memory": "104Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "metrics-server-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=40m",
                                    "--extra-cpu=0.5m",
                                    "--memory=40Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=metrics-server-v0.2.1",
                                    "--container=metrics-server",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "300Mi"
                                    },
                                    "requests": {
                                        "cpu": "5m",
                                        "memory": "50Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "metrics-server-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "metrics-server",
                        "serviceAccount": "metrics-server",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 1
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 2147483647
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2019-04-21T04:11:12Z",
                        "lastTransitionTime": "2019-04-21T04:11:12Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "30939"
    },
    "items": [
        {
            "metadata": {
                "name": "event-exporter-v0.2.3-85644fcdf",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/event-exporter-v0.2.3-85644fcdf",
                "uid": "7ed2d6cd-63eb-11e9-858b-42010a800036",
                "resourceVersion": "679",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "k8s-app": "event-exporter",
                    "pod-template-hash": "412009789",
                    "version": "v0.2.3"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "event-exporter-v0.2.3",
                        "uid": "7ed0d78f-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "event-exporter",
                        "pod-template-hash": "412009789",
                        "version": "v0.2.3"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "event-exporter",
                            "pod-template-hash": "412009789",
                            "version": "v0.2.3"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "ssl-certs",
                                "hostPath": {
                                    "path": "/etc/ssl/certs",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "event-exporter",
                                "image": "k8s.gcr.io/event-exporter:v0.2.3",
                                "command": [
                                    "/event-exporter",
                                    "-sink-opts=-stackdriver-resource-model=old"
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prometheus-to-sd-exporter",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "event-exporter-sa",
                        "serviceAccount": "event-exporter-sa",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-scaler-8b674f786",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/fluentd-gcp-scaler-8b674f786",
                "uid": "865bac93-63eb-11e9-858b-42010a800036",
                "resourceVersion": "672",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:23Z",
                "labels": {
                    "k8s-app": "fluentd-gcp-scaler",
                    "pod-template-hash": "462309342"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "fluentd-gcp-scaler",
                        "uid": "8659b3f4-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "fluentd-gcp-scaler",
                        "pod-template-hash": "462309342"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "fluentd-gcp-scaler",
                            "pod-template-hash": "462309342"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "fluentd-gcp-scaler",
                                "image": "k8s.gcr.io/fluentd-gcp-scaler:0.5",
                                "command": [
                                    "/scaler.sh",
                                    "--ds-name=fluentd-gcp-v3.2.0",
                                    "--scaling-policy=fluentd-gcp-scaling-policy"
                                ],
                                "env": [
                                    {
                                        "name": "CPU_REQUEST",
                                        "value": "100m"
                                    },
                                    {
                                        "name": "MEMORY_REQUEST",
                                        "value": "200Mi"
                                    },
                                    {
                                        "name": "CPU_LIMIT",
                                        "value": "1000m"
                                    },
                                    {
                                        "name": "MEMORY_LIMIT",
                                        "value": "500Mi"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "fluentd-gcp-scaler",
                        "serviceAccount": "fluentd-gcp-scaler",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.6.0-beta.1-69bffcb9dd",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/heapster-v1.6.0-beta.1-69bffcb9dd",
                "uid": "96fb615c-63eb-11e9-858b-42010a800036",
                "resourceVersion": "745",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:51Z",
                "labels": {
                    "k8s-app": "heapster",
                    "pod-template-hash": "2569976588",
                    "version": "v1.6.0-beta.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "2"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "heapster-v1.6.0-beta.1",
                        "uid": "7e2cfef9-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "heapster",
                        "pod-template-hash": "2569976588",
                        "version": "v1.6.0-beta.1"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "heapster",
                            "pod-template-hash": "2569976588",
                            "version": "v1.6.0-beta.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "heapster-config-volume",
                                "configMap": {
                                    "name": "heapster-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "heapster",
                                "image": "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1",
                                "command": [
                                    "/heapster",
                                    "--source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id",
                                    "--sink=stackdriver:?cluster_name=k8s-demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110\u0026cluster_location=us-central1-a"
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "88m",
                                        "memory": "204Mi"
                                    },
                                    "requests": {
                                        "cpu": "88m",
                                        "memory": "204Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8082,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 180,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prom-to-sd",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "heapster-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=80m",
                                    "--extra-cpu=0.5m",
                                    "--memory=140Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.6.0-beta.1",
                                    "--container=heapster",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "heapster-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "heapster",
                        "serviceAccount": "heapster",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.6.0-beta.1-95f5c74f8",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/heapster-v1.6.0-beta.1-95f5c74f8",
                "uid": "7e2feee9-63eb-11e9-858b-42010a800036",
                "resourceVersion": "724",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "k8s-app": "heapster",
                    "pod-template-hash": "519173094",
                    "version": "v1.6.0-beta.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "heapster-v1.6.0-beta.1",
                        "uid": "7e2cfef9-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 0,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "heapster",
                        "pod-template-hash": "519173094",
                        "version": "v1.6.0-beta.1"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "heapster",
                            "pod-template-hash": "519173094",
                            "version": "v1.6.0-beta.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "heapster-config-volume",
                                "configMap": {
                                    "name": "heapster-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "heapster",
                                "image": "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1",
                                "command": [
                                    "/heapster",
                                    "--source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id",
                                    "--sink=stackdriver:?cluster_name=k8s-demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110\u0026cluster_location=us-central1-a"
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8082,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 180,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prom-to-sd",
                                "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                                "command": [
                                    "/monitor",
                                    "--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "heapster-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=80m",
                                    "--extra-cpu=0.5m",
                                    "--memory=140Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.6.0-beta.1",
                                    "--container=heapster",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92960Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "heapster-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "heapster",
                        "serviceAccount": "heapster",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 0,
                "observedGeneration": 2
            }
        },
        {
            "metadata": {
                "name": "kube-dns-7df4cb66cb",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-7df4cb66cb",
                "uid": "7e700a3e-63eb-11e9-858b-42010a800036",
                "resourceVersion": "782",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "3890762276"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "2",
                    "deployment.kubernetes.io/max-replicas": "3",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "kube-dns",
                        "uid": "7e6e65f0-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "3890762276"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "3890762276"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-dns-config",
                                "configMap": {
                                    "name": "kube-dns",
                                    "defaultMode": 420,
                                    "optional": true
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kubedns",
                                "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                                "args": [
                                    "--domain=cluster.local.",
                                    "--dns-port=10053",
                                    "--config-dir=/kube-dns-config",
                                    "--v=2"
                                ],
                                "ports": [
                                    {
                                        "name": "dns-local",
                                        "containerPort": 10053,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp-local",
                                        "containerPort": 10053,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 10055,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "PROMETHEUS_PORT",
                                        "value": "10055"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kube-dns-config",
                                        "mountPath": "/kube-dns-config"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthcheck/kubedns",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readiness",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "dnsmasq",
                                "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                                "args": [
                                    "-v=2",
                                    "-logtostderr",
                                    "-configDir=/etc/k8s/dns/dnsmasq-nanny",
                                    "-restartDnsmasq=true",
                                    "--",
                                    "-k",
                                    "--cache-size=1000",
                                    "--no-negcache",
                                    "--log-facility=-",
                                    "--server=/cluster.local/127.0.0.1#10053",
                                    "--server=/in-addr.arpa/127.0.0.1#10053",
                                    "--server=/ip6.arpa/127.0.0.1#10053"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "150m",
                                        "memory": "20Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kube-dns-config",
                                        "mountPath": "/etc/k8s/dns/dnsmasq-nanny"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthcheck/dnsmasq",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "sidecar",
                                "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                                "args": [
                                    "--v=2",
                                    "--logtostderr",
                                    "--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV",
                                    "--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"
                                ],
                                "ports": [
                                    {
                                        "name": "metrics",
                                        "containerPort": 10054,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/metrics",
                                        "port": 10054,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "prometheus-to-sd",
                                "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                                "command": [
                                    "/monitor",
                                    "--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits",
                                    "--stackdriver-prefix=container.googleapis.com/internal/addons",
                                    "--api-override=https://monitoring.googleapis.com/",
                                    "--pod-id=$(POD_NAME)",
                                    "--namespace-id=$(POD_NAMESPACE)",
                                    "--v=2"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "serviceAccountName": "kube-dns",
                        "serviceAccount": "kube-dns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 2,
                "fullyLabeledReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "observedGeneration": 2
            }
        },
        {
            "metadata": {
                "name": "kube-dns-autoscaler-67c97c87fb",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-autoscaler-67c97c87fb",
                "uid": "7e998859-63eb-11e9-858b-42010a800036",
                "resourceVersion": "649",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "k8s-app": "kube-dns-autoscaler",
                    "pod-template-hash": "2375374396"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "kube-dns-autoscaler",
                        "uid": "7e987595-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns-autoscaler",
                        "pod-template-hash": "2375374396"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns-autoscaler",
                            "pod-template-hash": "2375374396"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "autoscaler",
                                "image": "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2",
                                "command": [
                                    "/cluster-proportional-autoscaler",
                                    "--namespace=kube-system",
                                    "--configmap=kube-dns-autoscaler",
                                    "--target=Deployment/kube-dns",
                                    "--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}",
                                    "--logtostderr=true",
                                    "--v=2"
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "20m",
                                        "memory": "10Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kube-dns-autoscaler",
                        "serviceAccount": "kube-dns-autoscaler",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "l7-default-backend-7ff48cffd7",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/l7-default-backend-7ff48cffd7",
                "uid": "7e084c25-63eb-11e9-858b-42010a800036",
                "resourceVersion": "733",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "k8s-app": "glbc",
                    "name": "glbc",
                    "pod-template-hash": "3990479983"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "l7-default-backend",
                        "uid": "7e06de58-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "glbc",
                        "pod-template-hash": "3990479983"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "glbc",
                            "name": "glbc",
                            "pod-template-hash": "3990479983"
                        },
                        "annotations": {
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "default-http-backend",
                                "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "20Mi"
                                    }
                                },
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "metrics-server-v0.2.1-597c89dc98",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-597c89dc98",
                "uid": "7fc23177-63eb-11e9-858b-42010a800036",
                "resourceVersion": "665",
                "generation": 2,
                "creationTimestamp": "2019-04-21T04:11:12Z",
                "labels": {
                    "k8s-app": "metrics-server",
                    "pod-template-hash": "1537458754",
                    "version": "v0.2.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "metrics-server-v0.2.1",
                        "uid": "7fb8cb71-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 0,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metrics-server",
                        "pod-template-hash": "1537458754",
                        "version": "v0.2.1"
                    }
                },
                "template": {
                    "metadata": {
                        "name": "metrics-server",
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metrics-server",
                            "pod-template-hash": "1537458754",
                            "version": "v0.2.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "metrics-server-config-volume",
                                "configMap": {
                                    "name": "metrics-server-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "metrics-server",
                                "image": "k8s.gcr.io/metrics-server-amd64:v0.2.1",
                                "command": [
                                    "/metrics-server",
                                    "--source=kubernetes.summary_api:''"
                                ],
                                "ports": [
                                    {
                                        "name": "https",
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "metrics-server-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=40m",
                                    "--extra-cpu=0.5m",
                                    "--memory=40Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=metrics-server-v0.2.1",
                                    "--container=metrics-server",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "300Mi"
                                    },
                                    "requests": {
                                        "cpu": "5m",
                                        "memory": "50Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "metrics-server-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "metrics-server",
                        "serviceAccount": "metrics-server",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 0,
                "observedGeneration": 2
            }
        },
        {
            "metadata": {
                "name": "metrics-server-v0.2.1-fd596d746",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-fd596d746",
                "uid": "9401cbd0-63eb-11e9-858b-42010a800036",
                "resourceVersion": "703",
                "generation": 1,
                "creationTimestamp": "2019-04-21T04:11:46Z",
                "labels": {
                    "k8s-app": "metrics-server",
                    "pod-template-hash": "981528302",
                    "version": "v0.2.1"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "2"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "metrics-server-v0.2.1",
                        "uid": "7fb8cb71-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metrics-server",
                        "pod-template-hash": "981528302",
                        "version": "v0.2.1"
                    }
                },
                "template": {
                    "metadata": {
                        "name": "metrics-server",
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metrics-server",
                            "pod-template-hash": "981528302",
                            "version": "v0.2.1"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": "",
                            "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "metrics-server-config-volume",
                                "configMap": {
                                    "name": "metrics-server-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "metrics-server",
                                "image": "k8s.gcr.io/metrics-server-amd64:v0.2.1",
                                "command": [
                                    "/metrics-server",
                                    "--source=kubernetes.summary_api:''"
                                ],
                                "ports": [
                                    {
                                        "name": "https",
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "48m",
                                        "memory": "104Mi"
                                    },
                                    "requests": {
                                        "cpu": "48m",
                                        "memory": "104Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "metrics-server-nanny",
                                "image": "k8s.gcr.io/addon-resizer:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=40m",
                                    "--extra-cpu=0.5m",
                                    "--memory=40Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=metrics-server-v0.2.1",
                                    "--container=metrics-server",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "300Mi"
                                    },
                                    "requests": {
                                        "cpu": "5m",
                                        "memory": "50Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "metrics-server-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "metrics-server",
                        "serviceAccount": "metrics-server",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "30939"
    },
    "items": [
        {
            "metadata": {
                "name": "event-exporter-v0.2.3-85644fcdf-d6nv2",
                "generateName": "event-exporter-v0.2.3-85644fcdf-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/event-exporter-v0.2.3-85644fcdf-d6nv2",
                "uid": "7ed4fbc8-63eb-11e9-858b-42010a800036",
                "resourceVersion": "675",
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "k8s-app": "event-exporter",
                    "pod-template-hash": "412009789",
                    "version": "v0.2.3"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "event-exporter-v0.2.3-85644fcdf",
                        "uid": "7ed2d6cd-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ssl-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": ""
                        }
                    },
                    {
                        "name": "event-exporter-sa-token-pjphw",
                        "secret": {
                            "secretName": "event-exporter-sa-token-pjphw",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "event-exporter",
                        "image": "k8s.gcr.io/event-exporter:v0.2.3",
                        "command": [
                            "/event-exporter",
                            "-sink-opts=-stackdriver-resource-model=old"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "event-exporter-sa-token-pjphw",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "command": [
                            "/monitor",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "event-exporter-sa-token-pjphw",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "event-exporter-sa",
                "serviceAccount": "event-exporter-sa",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:45Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.6",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "event-exporter",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:43Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/event-exporter:v0.2.3",
                        "imageID": "docker-pullable://k8s.gcr.io/event-exporter@sha256:7f9cd7cb04d6959b0aa960727d04fa86759008048c785397b7b0d9dff0007516",
                        "containerID": "docker://db12e2b565677574447950e14201706fbfdbd54afe7b0d414948ff65e750a008"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:43Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "imageID": "docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                        "containerID": "docker://3e2e259a7f550e48bc9f88a1573e1a4941a0b28777b23562581fe23cec355201"
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-scaler-8b674f786-dwsxw",
                "generateName": "fluentd-gcp-scaler-8b674f786-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/fluentd-gcp-scaler-8b674f786-dwsxw",
                "uid": "865d88db-63eb-11e9-858b-42010a800036",
                "resourceVersion": "669",
                "creationTimestamp": "2019-04-21T04:11:23Z",
                "labels": {
                    "k8s-app": "fluentd-gcp-scaler",
                    "pod-template-hash": "462309342"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "fluentd-gcp-scaler-8b674f786",
                        "uid": "865bac93-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "fluentd-gcp-scaler-token-65ltj",
                        "secret": {
                            "secretName": "fluentd-gcp-scaler-token-65ltj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "fluentd-gcp-scaler",
                        "image": "k8s.gcr.io/fluentd-gcp-scaler:0.5",
                        "command": [
                            "/scaler.sh",
                            "--ds-name=fluentd-gcp-v3.2.0",
                            "--scaling-policy=fluentd-gcp-scaling-policy"
                        ],
                        "env": [
                            {
                                "name": "CPU_REQUEST",
                                "value": "100m"
                            },
                            {
                                "name": "MEMORY_REQUEST",
                                "value": "200Mi"
                            },
                            {
                                "name": "CPU_LIMIT",
                                "value": "1000m"
                            },
                            {
                                "name": "MEMORY_LIMIT",
                                "value": "500Mi"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "fluentd-gcp-scaler-token-65ltj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "fluentd-gcp-scaler",
                "serviceAccount": "fluentd-gcp-scaler",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:45Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.5",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "fluentd-gcp-scaler",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:42Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/fluentd-gcp-scaler:0.5",
                        "imageID": "docker-pullable://k8s.gcr.io/fluentd-gcp-scaler@sha256:457a13df66534b94bab627c4c2dc2df0ee5153a5d0f0afd27502bd46bd8da81d",
                        "containerID": "docker://77a8e33f288de7331eac855dfc747d78740e861d8d65bd26189e73665ff4c116"
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-v3.2.0-7dmsx",
                "generateName": "fluentd-gcp-v3.2.0-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/fluentd-gcp-v3.2.0-7dmsx",
                "uid": "9c00a93d-63eb-11e9-858b-42010a800036",
                "resourceVersion": "778",
                "creationTimestamp": "2019-04-21T04:11:59Z",
                "labels": {
                    "controller-revision-hash": "169971793",
                    "k8s-app": "fluentd-gcp",
                    "kubernetes.io/cluster-service": "true",
                    "pod-template-generation": "2",
                    "version": "v3.2.0"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "fluentd-gcp-v3.2.0",
                        "uid": "7efe705b-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "varlibdockercontainers",
                        "hostPath": {
                            "path": "/var/lib/docker/containers",
                            "type": ""
                        }
                    },
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "fluentd-gcp-config-old-v1.2.5",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "fluentd-gcp-token-q6g8h",
                        "secret": {
                            "secretName": "fluentd-gcp-token-q6g8h",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "fluentd-gcp",
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            },
                            {
                                "name": "STACKDRIVER_METADATA_AGENT_URL",
                                "value": "http://$(NODE_NAME):8799"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "500Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "200Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "varlibdockercontainers",
                                "readOnly": true,
                                "mountPath": "/var/lib/docker/containers"
                            },
                            {
                                "name": "config-volume",
                                "mountPath": "/etc/google-fluentd/config.d"
                            },
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "exec": {
                                "command": [
                                    "/bin/sh",
                                    "-c",
                                    "LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; touch -d \"${STUCK_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-stuck; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)\" ]]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; touch -d \"${LIVENESS_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-liveness; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)\" ]]; then\n  exit 1;\nfi;\n"
                                ]
                            },
                            "initialDelaySeconds": 600,
                            "timeoutSeconds": 1,
                            "periodSeconds": 60,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "command": [
                            "/monitor",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "beta.kubernetes.io/fluentd-ds-ready": "true"
                },
                "serviceAccountName": "fluentd-gcp",
                "serviceAccount": "fluentd-gcp",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:12:01Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    }
                ],
                "hostIP": "10.128.0.53",
                "podIP": "10.0.1.4",
                "startTime": "2019-04-21T04:11:59Z",
                "containerStatuses": [
                    {
                        "name": "fluentd-gcp",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:01Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "imageID": "docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                        "containerID": "docker://dc86def44902541b3ecad928e756ff40c4d66698e542c95a7cbfbfe756975d61"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:01Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "imageID": "docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                        "containerID": "docker://454276180e1c5d6c0e38cb9b47c4c1377ee371d4e8c02173aac480a909e3d940"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-v3.2.0-mx68q",
                "generateName": "fluentd-gcp-v3.2.0-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/fluentd-gcp-v3.2.0-mx68q",
                "uid": "9bfeb9d0-63eb-11e9-858b-42010a800036",
                "resourceVersion": "809",
                "creationTimestamp": "2019-04-21T04:11:59Z",
                "labels": {
                    "controller-revision-hash": "169971793",
                    "k8s-app": "fluentd-gcp",
                    "kubernetes.io/cluster-service": "true",
                    "pod-template-generation": "2",
                    "version": "v3.2.0"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "fluentd-gcp-v3.2.0",
                        "uid": "7efe705b-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "varlibdockercontainers",
                        "hostPath": {
                            "path": "/var/lib/docker/containers",
                            "type": ""
                        }
                    },
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "fluentd-gcp-config-old-v1.2.5",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "fluentd-gcp-token-q6g8h",
                        "secret": {
                            "secretName": "fluentd-gcp-token-q6g8h",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "fluentd-gcp",
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            },
                            {
                                "name": "STACKDRIVER_METADATA_AGENT_URL",
                                "value": "http://$(NODE_NAME):8799"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "500Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "200Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "varlibdockercontainers",
                                "readOnly": true,
                                "mountPath": "/var/lib/docker/containers"
                            },
                            {
                                "name": "config-volume",
                                "mountPath": "/etc/google-fluentd/config.d"
                            },
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "exec": {
                                "command": [
                                    "/bin/sh",
                                    "-c",
                                    "LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; touch -d \"${STUCK_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-stuck; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)\" ]]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; touch -d \"${LIVENESS_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-liveness; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)\" ]]; then\n  exit 1;\nfi;\n"
                                ]
                            },
                            "initialDelaySeconds": 600,
                            "timeoutSeconds": 1,
                            "periodSeconds": 60,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "command": [
                            "/monitor",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "beta.kubernetes.io/fluentd-ds-ready": "true"
                },
                "serviceAccountName": "fluentd-gcp",
                "serviceAccount": "fluentd-gcp",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:12:11Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.10",
                "startTime": "2019-04-21T04:11:59Z",
                "containerStatuses": [
                    {
                        "name": "fluentd-gcp",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:10Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "imageID": "docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                        "containerID": "docker://2ca14ae411b6ae5c7705c2a61fcb9f4103b4030f9362c673e908363472db0b40"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:11Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "imageID": "docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                        "containerID": "docker://b73f03270ad7c0255011fe947d741479220c0bca02750139ba2ceb28b5473924"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "fluentd-gcp-v3.2.0-zdgd4",
                "generateName": "fluentd-gcp-v3.2.0-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/fluentd-gcp-v3.2.0-zdgd4",
                "uid": "9c001dac-63eb-11e9-858b-42010a800036",
                "resourceVersion": "806",
                "creationTimestamp": "2019-04-21T04:11:59Z",
                "labels": {
                    "controller-revision-hash": "169971793",
                    "k8s-app": "fluentd-gcp",
                    "kubernetes.io/cluster-service": "true",
                    "pod-template-generation": "2",
                    "version": "v3.2.0"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "fluentd-gcp-v3.2.0",
                        "uid": "7efe705b-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "varlibdockercontainers",
                        "hostPath": {
                            "path": "/var/lib/docker/containers",
                            "type": ""
                        }
                    },
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "fluentd-gcp-config-old-v1.2.5",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "fluentd-gcp-token-q6g8h",
                        "secret": {
                            "secretName": "fluentd-gcp-token-q6g8h",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "fluentd-gcp",
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            },
                            {
                                "name": "STACKDRIVER_METADATA_AGENT_URL",
                                "value": "http://$(NODE_NAME):8799"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "500Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "200Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "varlibdockercontainers",
                                "readOnly": true,
                                "mountPath": "/var/lib/docker/containers"
                            },
                            {
                                "name": "config-volume",
                                "mountPath": "/etc/google-fluentd/config.d"
                            },
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "exec": {
                                "command": [
                                    "/bin/sh",
                                    "-c",
                                    "LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; touch -d \"${STUCK_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-stuck; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)\" ]]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; touch -d \"${LIVENESS_THRESHOLD_SECONDS} seconds ago\" /tmp/marker-liveness; if [[ -z \"$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)\" ]]; then\n  exit 1;\nfi;\n"
                                ]
                            },
                            "initialDelaySeconds": 600,
                            "timeoutSeconds": 1,
                            "periodSeconds": 60,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "command": [
                            "/monitor",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--source=fluentd:http://localhost:24231?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "fluentd-gcp-token-q6g8h",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "beta.kubernetes.io/fluentd-ds-ready": "true"
                },
                "serviceAccountName": "fluentd-gcp",
                "serviceAccount": "fluentd-gcp",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:12:10Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:59Z"
                    }
                ],
                "hostIP": "10.128.0.54",
                "podIP": "10.0.2.3",
                "startTime": "2019-04-21T04:11:59Z",
                "containerStatuses": [
                    {
                        "name": "fluentd-gcp",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:09Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1",
                        "imageID": "docker-pullable://gcr.io/stackdriver-agents/stackdriver-logging-agent@sha256:f8d5231b67b9c53f60068b535a11811d29d1b3efd53d2b79f2a2591ea338e4f2",
                        "containerID": "docker://50a05fc548232d09888e9aa2d2467e5ef1526c28d9d0ac68beb98f3375dbfa07"
                    },
                    {
                        "name": "prometheus-to-sd-exporter",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:12:09Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "imageID": "docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                        "containerID": "docker://b018cb993fbc4c238434ef61feaca7310d6c9055e46c0047245e53064d129a3b"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5",
                "generateName": "heapster-v1.6.0-beta.1-69bffcb9dd-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5",
                "uid": "971556f7-63eb-11e9-858b-42010a800036",
                "resourceVersion": "743",
                "creationTimestamp": "2019-04-21T04:11:51Z",
                "labels": {
                    "k8s-app": "heapster",
                    "pod-template-hash": "2569976588",
                    "version": "v1.6.0-beta.1"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "heapster-v1.6.0-beta.1-69bffcb9dd",
                        "uid": "96fb615c-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "heapster-config-volume",
                        "configMap": {
                            "name": "heapster-config",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "heapster-token-7vwf7",
                        "secret": {
                            "secretName": "heapster-token-7vwf7",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "heapster",
                        "image": "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1",
                        "command": [
                            "/heapster",
                            "--source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id",
                            "--sink=stackdriver:?cluster_name=k8s-demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110\u0026cluster_location=us-central1-a"
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "88m",
                                "memory": "204Mi"
                            },
                            "requests": {
                                "cpu": "88m",
                                "memory": "204Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "heapster-token-7vwf7",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8082,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 180,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prom-to-sd",
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "command": [
                            "/monitor",
                            "--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "heapster-token-7vwf7",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "heapster-nanny",
                        "image": "k8s.gcr.io/addon-resizer:1.8.1",
                        "command": [
                            "/pod_nanny",
                            "--config-dir=/etc/config",
                            "--cpu=80m",
                            "--extra-cpu=0.5m",
                            "--memory=140Mi",
                            "--extra-memory=4Mi",
                            "--threshold=5",
                            "--deployment=heapster-v1.6.0-beta.1",
                            "--container=heapster",
                            "--poll-period=300000",
                            "--estimator=exponential"
                        ],
                        "env": [
                            {
                                "name": "MY_POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "MY_POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "50m",
                                "memory": "92960Ki"
                            },
                            "requests": {
                                "cpu": "50m",
                                "memory": "92960Ki"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "heapster-config-volume",
                                "mountPath": "/etc/config"
                            },
                            {
                                "name": "heapster-token-7vwf7",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "heapster",
                "serviceAccount": "heapster",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:51Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:56Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:51Z"
                    }
                ],
                "hostIP": "10.128.0.53",
                "podIP": "10.0.1.3",
                "startTime": "2019-04-21T04:11:51Z",
                "containerStatuses": [
                    {
                        "name": "heapster",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:55Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/heapster-amd64:v1.6.0-beta.1",
                        "imageID": "docker-pullable://k8s.gcr.io/heapster-amd64@sha256:9fae0af136ce0cf4f88393b3670f7139ffc464692060c374d2ae748e13144521",
                        "containerID": "docker://d20e30d44f22ba357a388008d973527693414426e22fb81ceac70864db6f3b17"
                    },
                    {
                        "name": "heapster-nanny",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:56Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/addon-resizer:1.8.1",
                        "imageID": "docker-pullable://k8s.gcr.io/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d",
                        "containerID": "docker://bb8b2f0705efd015b8843f30f435c06ce9f356511fd28d6d7a439c22a3955b53"
                    },
                    {
                        "name": "prom-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:55Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/prometheus-to-sd:v0.3.1",
                        "imageID": "docker-pullable://k8s.gcr.io/prometheus-to-sd@sha256:6c0c742475363d537ff059136e5d5e4ab1f512ee0fd9b7ca42ea48bc309d1662",
                        "containerID": "docker://9ea78cc20b185175b861d975b34a351364127dec192c08cb3eaff049e1cc1946"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-dns-7df4cb66cb-m2rkt",
                "generateName": "kube-dns-7df4cb66cb-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-dns-7df4cb66cb-m2rkt",
                "uid": "7e726945-63eb-11e9-858b-42010a800036",
                "resourceVersion": "780",
                "creationTimestamp": "2019-04-21T04:11:10Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "3890762276"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "kube-dns-7df4cb66cb",
                        "uid": "7e700a3e-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-dns-config",
                        "configMap": {
                            "name": "kube-dns",
                            "defaultMode": 420,
                            "optional": true
                        }
                    },
                    {
                        "name": "kube-dns-token-jkfbt",
                        "secret": {
                            "secretName": "kube-dns-token-jkfbt",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kubedns",
                        "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                        "args": [
                            "--domain=cluster.local.",
                            "--dns-port=10053",
                            "--config-dir=/kube-dns-config",
                            "--v=2"
                        ],
                        "ports": [
                            {
                                "name": "dns-local",
                                "containerPort": 10053,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp-local",
                                "containerPort": 10053,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 10055,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "PROMETHEUS_PORT",
                                "value": "10055"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-config",
                                "mountPath": "/kube-dns-config"
                            },
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthcheck/kubedns",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readiness",
                                "port": 8081,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 3,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "dnsmasq",
                        "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                        "args": [
                            "-v=2",
                            "-logtostderr",
                            "-configDir=/etc/k8s/dns/dnsmasq-nanny",
                            "-restartDnsmasq=true",
                            "--",
                            "-k",
                            "--cache-size=1000",
                            "--no-negcache",
                            "--log-facility=-",
                            "--server=/cluster.local/127.0.0.1#10053",
                            "--server=/in-addr.arpa/127.0.0.1#10053",
                            "--server=/ip6.arpa/127.0.0.1#10053"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "150m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-config",
                                "mountPath": "/etc/k8s/dns/dnsmasq-nanny"
                            },
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthcheck/dnsmasq",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "sidecar",
                        "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                        "args": [
                            "--v=2",
                            "--logtostderr",
                            "--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV",
                            "--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"
                        ],
                        "ports": [
                            {
                                "name": "metrics",
                                "containerPort": 10054,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "10m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/metrics",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd",
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                        "command": [
                            "/monitor",
                            "--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)",
                            "--v=2"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "serviceAccountName": "kube-dns",
                "serviceAccount": "kube-dns",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:12:01Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.7",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "dnsmasq",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:45df3e8e0c551bd0c79cdba48ae6677f817971dcbd1eeed7fd1f9a35118410e4",
                        "containerID": "docker://a506a9b4b0e4d8337a7dda3f57b11140e50491b086a8f3471fe7e7859d5dd960"
                    },
                    {
                        "name": "kubedns",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:44Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:618a82fa66cf0c75e4753369a6999032372be7308866fc9afb381789b1e5ad52",
                        "containerID": "docker://e07d9be1be5df2319609030e603af35354bf4e6d30542f0e45b4f9391368e122"
                    },
                    {
                        "name": "prometheus-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:51Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                        "imageID": "docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2",
                        "containerID": "docker://2dcf124b4d8ba37f65223d84121a5d163ba858d9c3488f553526e1be405e8c7f"
                    },
                    {
                        "name": "sidecar",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:cedc8fe2098dffc26d17f64061296b7aa54258a31513b6c52df271a98bb522b3",
                        "containerID": "docker://f0e65ca10bcbfc4a560511febac3e078c251ac03c99cda1c6f49dfb4e1a9dc3a"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-dns-7df4cb66cb-mx4fs",
                "generateName": "kube-dns-7df4cb66cb-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-dns-7df4cb66cb-mx4fs",
                "uid": "911d4365-63eb-11e9-858b-42010a800036",
                "resourceVersion": "757",
                "creationTimestamp": "2019-04-21T04:11:41Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "3890762276"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "kube-dns-7df4cb66cb",
                        "uid": "7e700a3e-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-dns-config",
                        "configMap": {
                            "name": "kube-dns",
                            "defaultMode": 420,
                            "optional": true
                        }
                    },
                    {
                        "name": "kube-dns-token-jkfbt",
                        "secret": {
                            "secretName": "kube-dns-token-jkfbt",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kubedns",
                        "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                        "args": [
                            "--domain=cluster.local.",
                            "--dns-port=10053",
                            "--config-dir=/kube-dns-config",
                            "--v=2"
                        ],
                        "ports": [
                            {
                                "name": "dns-local",
                                "containerPort": 10053,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp-local",
                                "containerPort": 10053,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 10055,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "PROMETHEUS_PORT",
                                "value": "10055"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-config",
                                "mountPath": "/kube-dns-config"
                            },
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthcheck/kubedns",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readiness",
                                "port": 8081,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 3,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "dnsmasq",
                        "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                        "args": [
                            "-v=2",
                            "-logtostderr",
                            "-configDir=/etc/k8s/dns/dnsmasq-nanny",
                            "-restartDnsmasq=true",
                            "--",
                            "-k",
                            "--cache-size=1000",
                            "--no-negcache",
                            "--log-facility=-",
                            "--server=/cluster.local/127.0.0.1#10053",
                            "--server=/in-addr.arpa/127.0.0.1#10053",
                            "--server=/ip6.arpa/127.0.0.1#10053"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "150m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-config",
                                "mountPath": "/etc/k8s/dns/dnsmasq-nanny"
                            },
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthcheck/dnsmasq",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "sidecar",
                        "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                        "args": [
                            "--v=2",
                            "--logtostderr",
                            "--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV",
                            "--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"
                        ],
                        "ports": [
                            {
                                "name": "metrics",
                                "containerPort": 10054,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "10m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/metrics",
                                "port": 10054,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "prometheus-to-sd",
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                        "command": [
                            "/monitor",
                            "--source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits",
                            "--stackdriver-prefix=container.googleapis.com/internal/addons",
                            "--api-override=https://monitoring.googleapis.com/",
                            "--pod-id=$(POD_NAME)",
                            "--namespace-id=$(POD_NAMESPACE)",
                            "--v=2"
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-dns-token-jkfbt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "serviceAccountName": "kube-dns",
                "serviceAccount": "kube-dns",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:57Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:41Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.9",
                "startTime": "2019-04-21T04:11:45Z",
                "containerStatuses": [
                    {
                        "name": "dnsmasq",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:48Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:45df3e8e0c551bd0c79cdba48ae6677f817971dcbd1eeed7fd1f9a35118410e4",
                        "containerID": "docker://4e33fd0b00462148f56f45b2a97ce56a2fd88ccbb7b2133e38a1b525c5032c67"
                    },
                    {
                        "name": "kubedns",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:618a82fa66cf0c75e4753369a6999032372be7308866fc9afb381789b1e5ad52",
                        "containerID": "docker://69c8c898e533c16a0337d6ed9044586f67c3986f429b6c3f70cf44f973a53514"
                    },
                    {
                        "name": "prometheus-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:51Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.4.2",
                        "imageID": "docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2",
                        "containerID": "docker://3a617b57411b144dd5632ee16cf55b75c697181c5dcc027f2a396b7bf9456e10"
                    },
                    {
                        "name": "sidecar",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.13",
                        "imageID": "docker-pullable://k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:cedc8fe2098dffc26d17f64061296b7aa54258a31513b6c52df271a98bb522b3",
                        "containerID": "docker://4b602eeda350a5416b69fd64b7d07a48769f3fe436fe541aa5b6584e74b80b5f"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-dns-autoscaler-67c97c87fb-6l4rd",
                "generateName": "kube-dns-autoscaler-67c97c87fb-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-dns-autoscaler-67c97c87fb-6l4rd",
                "uid": "8b9b5bf7-63eb-11e9-858b-42010a800036",
                "resourceVersion": "648",
                "creationTimestamp": "2019-04-21T04:11:32Z",
                "labels": {
                    "k8s-app": "kube-dns-autoscaler",
                    "pod-template-hash": "2375374396"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "kube-dns-autoscaler-67c97c87fb",
                        "uid": "7e998859-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-dns-autoscaler-token-65wl2",
                        "secret": {
                            "secretName": "kube-dns-autoscaler-token-65wl2",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "autoscaler",
                        "image": "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2",
                        "command": [
                            "/cluster-proportional-autoscaler",
                            "--namespace=kube-system",
                            "--configmap=kube-dns-autoscaler",
                            "--target=Deployment/kube-dns",
                            "--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}",
                            "--logtostderr=true",
                            "--v=2"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "20m",
                                "memory": "10Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kube-dns-autoscaler-token-65wl2",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "kube-dns-autoscaler",
                "serviceAccount": "kube-dns-autoscaler",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:45Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.2",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "autoscaler",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:41Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2",
                        "imageID": "docker-pullable://k8s.gcr.io/cluster-proportional-autoscaler-amd64@sha256:003f98d9f411ddfa6ff6d539196355e03ddd69fa4ed38c7ffb8fec6f729afe2d",
                        "containerID": "docker://5d4dbd71d073c24917fbfa2215a69a7e7f46ac11c7217c7d74de20ead4078f58"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "uid": "8f35e7f4-63eb-11e9-858b-42010a800036",
                "resourceVersion": "633",
                "creationTimestamp": "2019-04-21T04:11:38Z",
                "labels": {
                    "component": "kube-proxy",
                    "tier": "node"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.mirror": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.seen": "2019-04-21T04:11:38.25503916Z",
                    "kubernetes.io/config.source": "file",
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "usr-ca-certs",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": ""
                        }
                    },
                    {
                        "name": "etc-ssl-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": ""
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/var/lib/kube-proxy/kubeconfig",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "iptableslock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.11.8-gke.6",
                        "command": [
                            "/bin/sh",
                            "-c",
                            "exec kube-proxy --master=https://35.184.87.94 --kubeconfig=/var/lib/kube-proxy/kubeconfig --cluster-cidr=10.0.0.0/14 --resource-container=\"\" --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s 1\u003e\u003e/var/log/kube-proxy.log 2\u003e\u00261"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etc-ssl-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "usr-ca-certs",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            },
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "kubeconfig",
                                "mountPath": "/var/lib/kube-proxy/kubeconfig"
                            },
                            {
                                "name": "iptableslock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:39Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.128.0.52",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:38Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                        "imageID": "docker://sha256:2b424891d78a4704aa9d763b274f1be6752766d24463b9e3b5411a7bac2207ca",
                        "containerID": "docker://79f512d8a14228439252c9480a444d7a53d0bc2ad01d7c4a5829c3c3d904b76d"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "uid": "90819618-63eb-11e9-858b-42010a800036",
                "resourceVersion": "615",
                "creationTimestamp": "2019-04-21T04:11:40Z",
                "labels": {
                    "component": "kube-proxy",
                    "tier": "node"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.mirror": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.seen": "2019-04-21T04:11:40.416731356Z",
                    "kubernetes.io/config.source": "file",
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "usr-ca-certs",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": ""
                        }
                    },
                    {
                        "name": "etc-ssl-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": ""
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/var/lib/kube-proxy/kubeconfig",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "iptableslock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.11.8-gke.6",
                        "command": [
                            "/bin/sh",
                            "-c",
                            "exec kube-proxy --master=https://35.184.87.94 --kubeconfig=/var/lib/kube-proxy/kubeconfig --cluster-cidr=10.0.0.0/14 --resource-container=\"\" --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s 1\u003e\u003e/var/log/kube-proxy.log 2\u003e\u00261"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etc-ssl-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "usr-ca-certs",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            },
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "kubeconfig",
                                "mountPath": "/var/lib/kube-proxy/kubeconfig"
                            },
                            {
                                "name": "iptableslock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:40Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:41Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:40Z"
                    }
                ],
                "hostIP": "10.128.0.53",
                "podIP": "10.128.0.53",
                "startTime": "2019-04-21T04:11:40Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:40Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                        "imageID": "docker://sha256:2b424891d78a4704aa9d763b274f1be6752766d24463b9e3b5411a7bac2207ca",
                        "containerID": "docker://e127f887b306a12b5f947ea1ba0bde32970285e5df52f05253f9e204a170a004"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "uid": "90f1d602-63eb-11e9-858b-42010a800036",
                "resourceVersion": "631",
                "creationTimestamp": "2019-04-21T04:11:41Z",
                "labels": {
                    "component": "kube-proxy",
                    "tier": "node"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.mirror": "7790b93b08edf199f244c39621c0ca0d",
                    "kubernetes.io/config.seen": "2019-04-21T04:11:41.159236394Z",
                    "kubernetes.io/config.source": "file",
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "usr-ca-certs",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": ""
                        }
                    },
                    {
                        "name": "etc-ssl-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": ""
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/var/lib/kube-proxy/kubeconfig",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "varlog",
                        "hostPath": {
                            "path": "/var/log",
                            "type": ""
                        }
                    },
                    {
                        "name": "iptableslock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.11.8-gke.6",
                        "command": [
                            "/bin/sh",
                            "-c",
                            "exec kube-proxy --master=https://35.184.87.94 --kubeconfig=/var/lib/kube-proxy/kubeconfig --cluster-cidr=10.0.0.0/14 --resource-container=\"\" --oom-score-adj=-998 --v=2 --feature-gates=DynamicKubeletConfig=false,ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s 1\u003e\u003e/var/log/kube-proxy.log 2\u003e\u00261"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etc-ssl-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "usr-ca-certs",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            },
                            {
                                "name": "varlog",
                                "mountPath": "/var/log"
                            },
                            {
                                "name": "kubeconfig",
                                "mountPath": "/var/lib/kube-proxy/kubeconfig"
                            },
                            {
                                "name": "iptableslock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:41Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:41Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:41Z"
                    }
                ],
                "hostIP": "10.128.0.54",
                "podIP": "10.128.0.54",
                "startTime": "2019-04-21T04:11:41Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:41Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kube-proxy:v1.11.8-gke.6",
                        "imageID": "docker://sha256:2b424891d78a4704aa9d763b274f1be6752766d24463b9e3b5411a7bac2207ca",
                        "containerID": "docker://0916401034d39c6ff63ece5a1327212e869e1544105f23360443b40110bde422"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "l7-default-backend-7ff48cffd7-zh6cc",
                "generateName": "l7-default-backend-7ff48cffd7-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/l7-default-backend-7ff48cffd7-zh6cc",
                "uid": "7e0bf6fe-63eb-11e9-858b-42010a800036",
                "resourceVersion": "731",
                "creationTimestamp": "2019-04-21T04:11:09Z",
                "labels": {
                    "k8s-app": "glbc",
                    "name": "glbc",
                    "pod-template-hash": "3990479983"
                },
                "annotations": {
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "l7-default-backend-7ff48cffd7",
                        "uid": "7e084c25-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-rxlxj",
                        "secret": {
                            "secretName": "default-token-rxlxj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "default-http-backend",
                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                        "ports": [
                            {
                                "containerPort": 8080,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "10m",
                                "memory": "20Mi"
                            },
                            "requests": {
                                "cpu": "10m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-rxlxj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:52Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:38Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.0.0.8",
                "startTime": "2019-04-21T04:11:38Z",
                "containerStatuses": [
                    {
                        "name": "default-http-backend",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:52Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                        "imageID": "docker-pullable://k8s.gcr.io/defaultbackend-amd64@sha256:4dc5e07c8ca4e23bddb3153737d7b8c556e5fb2f29c4558b7cd6e6df99c512c7",
                        "containerID": "docker://591ca33653bdbe6227f5bfcb9a2cca26b1b41f5a070de05a87573e0d2edca86c"
                    }
                ],
                "qosClass": "Guaranteed"
            }
        },
        {
            "metadata": {
                "name": "metrics-server-v0.2.1-fd596d746-h99sk",
                "generateName": "metrics-server-v0.2.1-fd596d746-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/metrics-server-v0.2.1-fd596d746-h99sk",
                "uid": "940d79bf-63eb-11e9-858b-42010a800036",
                "resourceVersion": "701",
                "creationTimestamp": "2019-04-21T04:11:46Z",
                "labels": {
                    "k8s-app": "metrics-server",
                    "pod-template-hash": "981528302",
                    "version": "v0.2.1"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "metrics-server-v0.2.1-fd596d746",
                        "uid": "9401cbd0-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "metrics-server-config-volume",
                        "configMap": {
                            "name": "metrics-server-config",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "metrics-server-token-lj4bj",
                        "secret": {
                            "secretName": "metrics-server-token-lj4bj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "metrics-server",
                        "image": "k8s.gcr.io/metrics-server-amd64:v0.2.1",
                        "command": [
                            "/metrics-server",
                            "--source=kubernetes.summary_api:''"
                        ],
                        "ports": [
                            {
                                "name": "https",
                                "containerPort": 443,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "48m",
                                "memory": "104Mi"
                            },
                            "requests": {
                                "cpu": "48m",
                                "memory": "104Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "metrics-server-token-lj4bj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "metrics-server-nanny",
                        "image": "k8s.gcr.io/addon-resizer:1.8.1",
                        "command": [
                            "/pod_nanny",
                            "--config-dir=/etc/config",
                            "--cpu=40m",
                            "--extra-cpu=0.5m",
                            "--memory=40Mi",
                            "--extra-memory=4Mi",
                            "--threshold=5",
                            "--deployment=metrics-server-v0.2.1",
                            "--container=metrics-server",
                            "--poll-period=300000",
                            "--estimator=exponential"
                        ],
                        "env": [
                            {
                                "name": "MY_POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "MY_POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "300Mi"
                            },
                            "requests": {
                                "cpu": "5m",
                                "memory": "50Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "metrics-server-config-volume",
                                "mountPath": "/etc/config"
                            },
                            {
                                "name": "metrics-server-token-lj4bj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "metrics-server",
                "serviceAccount": "metrics-server",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:46Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:50Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:46Z"
                    }
                ],
                "hostIP": "10.128.0.54",
                "podIP": "10.0.2.2",
                "startTime": "2019-04-21T04:11:46Z",
                "containerStatuses": [
                    {
                        "name": "metrics-server",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/metrics-server-amd64:v0.2.1",
                        "imageID": "docker-pullable://k8s.gcr.io/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892",
                        "containerID": "docker://44a7e341bb479e3688995106ab733125de2a6c3fcfd9e15159ebcb76def54266"
                    },
                    {
                        "name": "metrics-server-nanny",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/addon-resizer:1.8.1",
                        "imageID": "docker-pullable://k8s.gcr.io/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d",
                        "containerID": "docker://64f6db8fa19f1c6f56cb97b7f7e391330d81b0d839d6116ec117f7bd288ed524"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "prometheus-to-sd-c82zs",
                "generateName": "prometheus-to-sd-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/prometheus-to-sd-c82zs",
                "uid": "85478693-63eb-11e9-858b-42010a800036",
                "resourceVersion": "532",
                "creationTimestamp": "2019-04-21T04:11:21Z",
                "labels": {
                    "controller-revision-hash": "2679033685",
                    "k8s-app": "prometheus-to-sd",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "prometheus-to-sd",
                        "uid": "7f222666-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-rxlxj",
                        "secret": {
                            "secretName": "default-token-rxlxj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "prometheus-to-sd",
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "command": [
                            "/monitor",
                            "--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\u0026metricsPrefix=container.googleapis.com/internal/addons",
                            "--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total",
                            "--stackdriver-prefix=container.googleapis.com/internal/nodes",
                            "--api-override=https://monitoring.googleapis.com/"
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "3m",
                                "memory": "20Mi"
                            },
                            "requests": {
                                "cpu": "1m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-rxlxj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-qmwj",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:21Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:26Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:21Z"
                    }
                ],
                "hostIP": "10.128.0.54",
                "podIP": "10.128.0.54",
                "startTime": "2019-04-21T04:11:21Z",
                "containerStatuses": [
                    {
                        "name": "prometheus-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:25Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "imageID": "docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                        "containerID": "docker://1455ad39f24b82784ef0e8b7a5817867457e04d76913c537662da46536995674"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "prometheus-to-sd-d2mnk",
                "generateName": "prometheus-to-sd-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/prometheus-to-sd-d2mnk",
                "uid": "83bd198f-63eb-11e9-858b-42010a800036",
                "resourceVersion": "524",
                "creationTimestamp": "2019-04-21T04:11:19Z",
                "labels": {
                    "controller-revision-hash": "2679033685",
                    "k8s-app": "prometheus-to-sd",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "prometheus-to-sd",
                        "uid": "7f222666-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-rxlxj",
                        "secret": {
                            "secretName": "default-token-rxlxj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "prometheus-to-sd",
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "command": [
                            "/monitor",
                            "--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\u0026metricsPrefix=container.googleapis.com/internal/addons",
                            "--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total",
                            "--stackdriver-prefix=container.googleapis.com/internal/nodes",
                            "--api-override=https://monitoring.googleapis.com/"
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "3m",
                                "memory": "20Mi"
                            },
                            "requests": {
                                "cpu": "1m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-rxlxj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-9jxq",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:19Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:25Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:19Z"
                    }
                ],
                "hostIP": "10.128.0.52",
                "podIP": "10.128.0.52",
                "startTime": "2019-04-21T04:11:19Z",
                "containerStatuses": [
                    {
                        "name": "prometheus-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:24Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "imageID": "docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                        "containerID": "docker://df654e64ea46ba2a7ba923a515ca67553722220ffa01737054c3bf8246d5e35c"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "prometheus-to-sd-pw4vg",
                "generateName": "prometheus-to-sd-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/prometheus-to-sd-pw4vg",
                "uid": "84c621ce-63eb-11e9-858b-42010a800036",
                "resourceVersion": "527",
                "creationTimestamp": "2019-04-21T04:11:20Z",
                "labels": {
                    "controller-revision-hash": "2679033685",
                    "k8s-app": "prometheus-to-sd",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "prometheus-to-sd",
                        "uid": "7f222666-63eb-11e9-858b-42010a800036",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-rxlxj",
                        "secret": {
                            "secretName": "default-token-rxlxj",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "prometheus-to-sd",
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "command": [
                            "/monitor",
                            "--source=kube-proxy:http://localhost:10249?whitelisted=sync_proxy_rules_latency_microseconds\u0026metricsPrefix=container.googleapis.com/internal/addons",
                            "--source=kubelet:http://localhost:10255?whitelisted=docker_operations,docker_operations_errors,runtime_operations,runtime_operations_errors,rest_client_requests_total,storage_operation_duration_seconds,storage_operation_errors_total,run_podsandbox_duration_seconds,run_podsandbox_errors_total",
                            "--stackdriver-prefix=container.googleapis.com/internal/nodes",
                            "--api-override=https://monitoring.googleapis.com/"
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "3m",
                                "memory": "20Mi"
                            },
                            "requests": {
                                "cpu": "1m",
                                "memory": "20Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-rxlxj",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "gke-k8s-demo-default-pool-bc3c4575-mzfw",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:20Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:26Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": null
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2019-04-21T04:11:20Z"
                    }
                ],
                "hostIP": "10.128.0.53",
                "podIP": "10.128.0.53",
                "startTime": "2019-04-21T04:11:20Z",
                "containerStatuses": [
                    {
                        "name": "prometheus-to-sd",
                        "state": {
                            "running": {
                                "startedAt": "2019-04-21T04:11:25Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google-containers/prometheus-to-sd:v0.5.0",
                        "imageID": "docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:14666989f40bb7c896c3e775a93c6873e2b791d65bc65579f58a078b7f9a764e",
                        "containerID": "docker://3523e896ce1440437a5c095368c49c721c43c41bfa899f256e4d080f9f7b1303"
                    }
                ],
                "qosClass": "Burstable"
            }
        }
    ]
}
==== START logs for container event-exporter of pod kube-system/event-exporter-v0.2.3-85644fcdf-d6nv2 ====
I0421 04:11:44.203528       1 sink.go:131] Starting Stackdriver sink
W0421 04:23:24.550818       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 04:31:49.587237       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 04:38:23.637481       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 04:47:06.812090       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 05:27:47.010487       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 05:34:02.152895       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 05:42:00.194281       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 05:50:29.304548       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 06:16:48.368861       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 06:31:19.454617       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 07:01:04.519852       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 07:14:03.564297       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 07:21:50.634566       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
W0421 07:29:22.749368       1 reflector.go:323] github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/watcher.go:50: watch of *v1.Event ended with: The resourceVersion for the provided watch is too old.
==== END logs for container event-exporter of pod kube-system/event-exporter-v0.2.3-85644fcdf-d6nv2 ====
==== START logs for container prometheus-to-sd-exporter of pod kube-system/event-exporter-v0.2.3-85644fcdf-d6nv2 ====
I0421 04:11:43.839080       1 main.go:89] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo Instance:gke-k8s-demo-default-pool-bc3c4575-9jxq MetricsPrefix:container.googleapis.com/internal/addons}
I0421 04:11:43.839363       1 main.go:135] Taking source configs from flags
I0421 04:11:43.839398       1 main.go:137] Taking source configs from kubernetes api server
I0421 04:11:43.839431       1 main.go:92] Built the following source configs: [{event_exporter localhost 80 /metrics [stackdriver_sink_received_entry_count stackdriver_sink_request_count stackdriver_sink_successfully_sent_entry_count] {event-exporter-v0.2.3-85644fcdf-d6nv2 kube-system}}]
I0421 04:11:43.839510       1 main.go:163] Running prometheus-to-sd, monitored target is event_exporter localhost:80
==== END logs for container prometheus-to-sd-exporter of pod kube-system/event-exporter-v0.2.3-85644fcdf-d6nv2 ====
==== START logs for container fluentd-gcp-scaler of pod kube-system/fluentd-gcp-scaler-8b674f786-dwsxw ====
2019-04-21T04:11:45,068202938+00:00 requests.cpu needs updating. Is: '', want: '100m'.
2019-04-21T04:11:45,353766344+00:00 requests.memory needs updating. Is: '', want: '200Mi'.
2019-04-21T04:11:45,632152309+00:00 limits.cpu needs updating. Is: '', want: '1000m'.
2019-04-21T04:11:46,595827038+00:00 limits.memory needs updating. Is: '', want: '500Mi'.
2019-04-21T04:11:46,596689759+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
daemonset.extensions/fluentd-gcp-v3.2.0 resource requirements updated
2019-04-21T04:12:47,559383223+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:12:47,647179975+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:13:48,136067497+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:13:48,224614679+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:14:48,766729000+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:14:48,862047812+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:15:50,055252604+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:15:50,299465722+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:16:50,898312417+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:16:50,986767436+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:17:51,509408183+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:17:51,601393034+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:18:52,105822377+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:18:52,194675425+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:19:52,747590292+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:19:52,837465876+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:20:53,342303774+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:20:53,432844770+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:21:54,101776806+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:21:54,194985710+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:22:54,729728876+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:22:54,823787552+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:23:55,332689073+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:23:55,429114353+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:24:55,926746626+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:24:56,020069740+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:25:56,545914800+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:25:56,633782130+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:26:57,122580447+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:26:57,210729072+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:27:57,715598770+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:27:57,804646651+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:28:58,706950769+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:28:58,810936810+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:29:59,318420051+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:29:59,411932928+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:30:59,891057499+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:30:59,979113573+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:32:00,631122028+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:32:00,724635335+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:33:01,230123658+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:33:01,321462093+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:34:01,835419999+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:34:01,924397151+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:35:02,424437447+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:35:02,513874744+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:36:03,005447156+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:36:03,102256993+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:37:03,621891382+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:37:03,710602142+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:38:04,207592832+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:38:04,302495339+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:39:04,820214920+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:39:04,915795634+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:40:05,451296176+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:40:05,551350769+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:41:06,106306382+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:41:06,197214370+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:42:06,888574252+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:42:06,979573867+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:43:07,467707769+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:43:07,555808673+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:44:08,053924423+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:44:08,142332724+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:45:08,660039607+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:45:08,749155614+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:46:09,269240947+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:46:09,368373410+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:47:09,867117455+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:47:09,958112110+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:48:10,495426801+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:48:10,587551946+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:49:11,085004836+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:49:11,180465203+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:50:11,732054025+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:50:11,828613342+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:51:12,352107065+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:51:12,446443227+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:52:13,091611900+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:52:13,183425268+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:53:13,678852413+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:53:13,768295655+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:54:14,300948630+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:54:14,404692895+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:55:14,892159614+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:55:14,981403821+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:56:15,473489339+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:56:15,567124857+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:57:16,070753712+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:57:16,160708581+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:58:16,670543354+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:58:16,768015919+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T04:59:17,298516666+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T04:59:17,386617055+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:00:17,906861339+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:00:18,003936076+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:01:18,513779747+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:01:18,659352490+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:02:19,438097008+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:02:19,527322000+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:03:20,020435021+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:03:20,108020713+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:04:20,605507579+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:04:20,696803923+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:05:21,252599668+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:05:21,352521340+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:06:21,981197087+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:06:22,095292957+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:07:22,764057584+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:07:22,894232194+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:08:23,538565734+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:08:23,630492550+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:09:24,144812340+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:09:24,240200259+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:10:24,744539733+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:10:24,832054457+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:11:25,342727602+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:11:25,434835756+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:12:26,068687245+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:12:26,159639212+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:13:26,660003805+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:13:26,750855640+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:14:27,242199845+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:14:27,337990204+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:15:27,852701494+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:15:27,945034416+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:16:28,466832695+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:16:28,566619100+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:17:29,072074856+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:17:29,164534109+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:18:29,773714694+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:18:29,887299121+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:19:30,469135900+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:19:30,563045346+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:20:31,073534267+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:20:31,173714309+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:21:31,701361804+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:21:31,811628656+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:22:32,480094777+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:22:32,569123078+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:23:33,063763844+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:23:33,152402115+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:24:33,645800976+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:24:33,732314138+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:25:34,232247457+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:25:34,327775751+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:26:34,824712897+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:26:34,916290184+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:27:35,434464643+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:27:35,527592385+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:28:36,033146329+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:28:36,129375085+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:29:36,653473841+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:29:36,741460624+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:30:37,214738656+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:30:37,309268991+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:31:37,805519148+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:31:37,896601335+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:32:38,621355333+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:32:38,721207841+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:33:39,236558216+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:33:39,328189788+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:34:39,834352701+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:34:39,938102939+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:35:40,497026403+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:35:40,589787277+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:36:41,094646854+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:36:41,185913117+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:37:41,689980577+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:37:41,783572535+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:38:42,275657776+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:38:42,378555070+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:39:42,891234997+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:39:42,982406280+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:40:43,578782825+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:40:43,700254770+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:41:44,243501773+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:41:44,340578951+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:42:44,966328763+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:42:45,054686949+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:43:45,560909632+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:43:45,657754547+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:44:46,158082065+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:44:46,251942101+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:45:46,775443251+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:45:46,906904279+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:46:47,407502442+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:46:47,503966801+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:47:48,001064316+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:47:48,092461023+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:48:48,633909453+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:48:48,729686448+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:49:49,273728937+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:49:49,373498318+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:50:50,639815122+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:50:50,840275249+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:51:51,491515071+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:51:51,580125067+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:52:52,203085231+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:52:52,291587420+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:53:52,800775670+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:53:52,887167543+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:54:53,374029692+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:54:53,467426754+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:55:53,989928465+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:55:54,083490505+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:56:54,589638384+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:56:54,684094838+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:57:55,212534675+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:57:55,316993249+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:58:55,836245640+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:58:55,924808346+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T05:59:56,444563752+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T05:59:56,538531930+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:00:57,038711275+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:00:57,131338083+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:01:57,640754056+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:01:57,733350715+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:02:58,361380347+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:02:58,451765158+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:03:58,985897580+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:03:59,084467609+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:04:59,592672982+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:04:59,683324920+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:06:00,197405411+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:06:00,285762897+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:07:00,834109257+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:07:00,925119632+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:08:01,460651283+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:08:01,554739312+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:09:02,074481742+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:09:02,209798985+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:10:02,779203577+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:10:02,880198245+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:11:03,738915736+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:11:03,830038356+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:12:04,372982377+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:12:04,467671431+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:13:05,192709568+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:13:05,292586701+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:14:05,818483359+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:14:05,909418460+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:15:06,423333439+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:15:06,516132737+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:16:07,037082077+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:16:07,130647403+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:17:07,630947296+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:17:07,726314909+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:18:08,227756219+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:18:08,321907434+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:19:08,859977797+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:19:08,959233229+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:20:09,551289630+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:20:09,644305954+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:21:10,155312190+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:21:10,248182854+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:22:10,792359883+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:22:10,887871405+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:23:11,572355242+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:23:11,664242643+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:24:12,184792243+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:24:12,280984701+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:25:12,798397975+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:25:12,896669968+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:26:13,404192740+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:26:13,493543241+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:27:13,994294130+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:27:14,085522121+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:28:14,607200443+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:28:14,705650279+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:29:15,208797271+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:29:15,297538271+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:30:15,806248710+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:30:15,900120763+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:31:16,416269421+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:31:16,509245081+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:32:17,087458257+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:32:17,181370045+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:33:17,969531362+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:33:18,067753537+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:34:18,609757003+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:34:18,705771260+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:35:19,205582238+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:35:19,294975436+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:36:19,783535454+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:36:19,872305595+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:37:20,385589256+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:37:20,484142394+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:38:20,987439518+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:38:21,081480133+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:39:21,624044254+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:39:21,721900131+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:40:22,226298005+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:40:22,313735644+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:41:22,827743374+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:41:22,924416980+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:42:23,415757856+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:42:23,504766705+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:43:24,169827555+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:43:24,260524149+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:44:24,760391586+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:44:24,854237562+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:45:25,363678398+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:45:25,455625809+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:46:25,992344105+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:46:26,081791385+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:47:26,583205793+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:47:26,671884609+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:48:27,173520129+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:48:27,305982461+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:49:27,860432786+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:49:27,950144530+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:50:28,497283688+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:50:28,598698553+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:51:29,121306700+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:51:29,211333351+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:52:29,724827971+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:52:29,822089969+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:53:30,491521681+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:53:30,585443806+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:54:31,117283356+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:54:31,212733344+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:55:31,790448615+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:55:31,888136725+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:56:32,426505358+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:56:32,518573153+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:57:33,027565696+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:57:33,117501357+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:58:33,632237221+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:58:33,724505721+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T06:59:34,215068495+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T06:59:34,303889042+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:00:34,804866554+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:00:34,892196678+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:01:35,397481858+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:01:35,488715614+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:02:35,975408992+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:02:36,066839681+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:03:36,726451686+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:03:36,817735662+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:04:37,291179655+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:04:37,377438214+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:05:37,863447561+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:05:37,954075745+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:06:38,452997337+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:06:38,546811021+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:07:39,029512991+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:07:39,115647566+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:08:39,613058520+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:08:39,704079957+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:09:40,199982202+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:09:40,290367921+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:10:40,818306212+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:10:40,905758238+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:11:41,421103532+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:11:41,510237271+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:12:42,013004859+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:12:42,107631656+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:13:42,770246316+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:13:42,858382193+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:14:43,367397509+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:14:43,454352701+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:15:43,981073570+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:15:44,076169781+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:16:44,586241599+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:16:44,675322976+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:17:45,170291348+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:17:45,256215912+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:18:45,742215710+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:18:45,829126941+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:19:46,319044563+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:19:46,412707550+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:20:47,000085030+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:20:47,091473416+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:21:47,618694247+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:21:47,734514166+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:22:48,214134686+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:22:48,301579783+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:23:49,002127869+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:23:49,092214169+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:24:49,600649182+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:24:49,688085359+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:25:50,995714778+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:25:51,191587144+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:26:51,803512195+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:26:51,892183485+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:27:52,405770994+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:27:52,496835342+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:28:53,004046615+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:28:53,091895894+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:29:53,588063561+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:29:53,677231543+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:30:54,170049666+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:30:54,264881921+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:31:54,808896403+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:31:54,901897445+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:32:55,419664118+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:32:55,517114841+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:33:56,202473958+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:33:56,292609786+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
2019-04-21T07:34:56,787240519+00:00 limits.cpu needs updating. Is: '1', want: '1000m'.
2019-04-21T07:34:56,876922819+00:00 Running: kubectl set resources -n kube-system ds fluentd-gcp-v3.2.0 -c fluentd-gcp --requests=cpu=100m,memory=200Mi --limits=cpu=1000m,memory=500Mi
error: info: {extensions v1beta1 daemonsets} "fluentd-gcp-v3.2.0" was not changed
==== END logs for container fluentd-gcp-scaler of pod kube-system/fluentd-gcp-scaler-8b674f786-dwsxw ====
==== START logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-7dmsx ====
2019-04-21 04:12:01 +0000 [info]: parsing config file is succeeded path="/etc/google-fluentd/google-fluentd.conf"
2019-04-21 04:12:02 +0000 [info]: Detected GCE platform
2019-04-21 04:12:02 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/568548187776111596
2019-04-21 04:12:02 +0000 [info]: Detected GCE platform
2019-04-21 04:12:02 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/568548187776111596
2019-04-21 04:12:02 +0000 [info]: Detected GCE platform
2019-04-21 04:12:02 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/568548187776111596
2019-04-21 04:12:02 +0000 [warn]: 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:02 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:02 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:02 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:02 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:02 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:02 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:02 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:02 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:02 +0000 [info]: using configuration file: <ROOT>
  <source>
    @type tail
    path "/var/log/containers/*.log"
    pos_file "/var/log/gcp-containers.log.pos"
    tag "reform.*"
    read_from_head true
    <parse>
      @type "multi_format"
      <pattern>
        format json
        time_key "time"
        time_format "%Y-%m-%dT%H:%M:%S.%NZ"
        time_type string
      </pattern>
      <pattern>
        format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
        time_format "%Y-%m-%dT%H:%M:%S.%N%:z"
        expression ^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$
        ignorecase false
        multiline false
      </pattern>
    </parse>
  </source>
  <filter reform.**>
    @type parser
    format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
    reserve_data true
    suppress_parse_error_log true
    emit_invalid_record_to_error false
    key_name "log"
    <parse>
      @type regexp
      expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
    </parse>
  </filter>
  <match reform.**>
    @type record_reformer
    enable_ruby true
    tag "raw.kubernetes.${tag_suffix[4].split(\'-\')[0..-2].join(\'-\')}"
  </match>
  <match raw.kubernetes.**>
    @type detect_exceptions
    remove_tag_prefix "raw"
    message "log"
    stream "stream"
    multiline_flush_interval 5
    max_bytes 500000
    max_lines 1000
  </match>
  <source>
    @type exec
    command "/bin/sh -c \'date +%s\'"
    tag "process_start"
    time_format %Y-%m-%d %H:%M:%S
    keys process_start_timestamp
    <extract>
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </extract>
    <parse>
      keys process_start_timestamp
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </parse>
  </source>
  <filter process_start>
    @type record_transformer
    enable_ruby true
    auto_typecast true
    <record>
      process_start_timestamp ${record["process_start_timestamp"].to_i}
    </record>
  </filter>
  <match process_start>
    @type prometheus
    <metric>
      type gauge
      name process_start_time_seconds
      desc Timestamp of the process start in seconds
      key process_start_timestamp
    </metric>
  </match>
  <filter **>
    @type prometheus
    <metric>
      type counter
      name logging_entry_count
      desc Total number of log entries generated by either application containers or system components
    </metric>
  </filter>
  <filter kubernetes.**>
    @type record_transformer
    enable_ruby true
    <record>
      log ${record['log'].length > 100000 ? "[Trimmed]#{record['log'][0..100000]}..." : record['log']}
    </record>
  </filter>
  <match fluent.**>
    @type null
  </match>
  <match kubernetes.**>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.containers.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 6
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.containers.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 6
      overflow_action block
    </buffer>
  </match>
  <match **>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    detect_subservice false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.system.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 2
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.system.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 2
      overflow_action block
    </buffer>
  </match>
  <source>
    @type tail
    format syslog
    path "/var/log/startupscript.log"
    pos_file "/var/log/gcp-startupscript.log.pos"
    tag "startupscript"
    <parse>
      @type syslog
    </parse>
  </source>
  <source>
    @type tail
    format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
    path "/var/log/docker.log"
    pos_file "/var/log/gcp-docker.log.pos"
    tag "docker"
    <parse>
      @type regexp
      expression ^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?
    </parse>
  </source>
  <source>
    @type tail
    format none
    path "/var/log/etcd.log"
    pos_file "/var/log/gcp-etcd.log.pos"
    tag "etcd"
    <parse>
      @type none
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kubelet.log"
    pos_file "/var/log/gcp-kubelet.log.pos"
    tag "kubelet"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-proxy.log"
    pos_file "/var/log/gcp-kube-proxy.log.pos"
    tag "kube-proxy"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-apiserver.log"
    pos_file "/var/log/gcp-kube-apiserver.log.pos"
    tag "kube-apiserver"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-controller-manager.log"
    pos_file "/var/log/gcp-kube-controller-manager.log.pos"
    tag "kube-controller-manager"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-scheduler.log"
    pos_file "/var/log/gcp-kube-scheduler.log.pos"
    tag "kube-scheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/rescheduler.log"
    pos_file "/var/log/gcp-rescheduler.log.pos"
    tag "rescheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/glbc.log"
    pos_file "/var/log/gcp-glbc.log.pos"
    tag "glbc"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/cluster-autoscaler.log"
    pos_file "/var/log/gcp-cluster-autoscaler.log.pos"
    tag "cluster-autoscaler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"docker.service"}]
    pos_file "/var/log/gcp-journald-docker.pos"
    read_from_head true
    tag "docker"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"containerd.service"}]
    pos_file "/var/log/gcp-journald-container-runtime.pos"
    read_from_head true
    tag "container-runtime"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"kubelet.service"}]
    pos_file "/var/log/gcp-journald-kubelet.pos"
    read_from_head true
    tag "kubelet"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"node-problem-detector.service"}]
    pos_file "/var/log/gcp-journald-node-problem-detector.pos"
    read_from_head true
    tag "node-problem-detector"
  </source>
  <source>
    @type prometheus
    port 24231
  </source>
  <source>
    @type prometheus_monitor
  </source>
  <match fluent.**>
    @type null
  </match>
  <filter **>
    @type add_insert_ids
  </filter>
  <match **>
    @type google_cloud
    buffer_chunk_limit 1M
    flush_interval 5s
    disable_retry_limit false
    retry_limit 3
    retry_wait 10
    max_retry_wait 300
    num_threads 8
    detect_json true
    enable_metadata_agent true
    metadata_agent_url "http://local-metadata-agent.stackdriver.com:8000"
    use_grpc true
    partial_success true
    enable_monitoring true
    monitoring_type "prometheus"
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      flush_thread_count 8
      flush_interval 5s
      retry_forever false
      retry_max_times 3
      retry_max_interval 300
      chunk_limit_size 1M
    </buffer>
  </match>
</ROOT>
2019-04-21 04:12:02 +0000 [info]: starting fluentd-1.2.5 pid=1 ruby="2.4.3"
2019-04-21 04:12:02 +0000 [info]: spawn command to main:  cmdline=["/opt/google-fluentd/embedded/bin/ruby", "-Eascii-8bit:ascii-8bit", "/usr/sbin/google-fluentd", "--under-supervisor"]
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-mixin-config-placeholders' version '0.4.0'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-mixin-plaintextformatter' version '0.2.6'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-detect-exceptions' version '0.0.10'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-google-cloud' version '0.7.0'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-multi-format-parser' version '0.1.1'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-prometheus' version '0.3.0'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-record-reformer' version '0.9.1'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-rewrite-tag-filter' version '1.5.5'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-s3' version '0.8.4'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-scribe' version '0.10.14'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-systemd' version '0.3.0'
2019-04-21 04:12:02 +0000 [info]: gem 'fluent-plugin-webhdfs' version '0.4.2'
2019-04-21 04:12:02 +0000 [info]: gem 'fluentd' version '1.2.5'
2019-04-21 04:12:02 +0000 [info]: gem 'fluentd' version '0.14.25'
2019-04-21 04:12:02 +0000 [info]: adding filter pattern="reform.**" type="parser"
2019-04-21 04:12:02 +0000 [info]: adding match pattern="reform.**" type="record_reformer"
2019-04-21 04:12:02 +0000 [info]: adding match pattern="raw.kubernetes.**" type="detect_exceptions"
2019-04-21 04:12:02 +0000 [info]: adding filter pattern="process_start" type="record_transformer"
2019-04-21 04:12:02 +0000 [info]: adding match pattern="process_start" type="prometheus"
2019-04-21 04:12:02 +0000 [info]: adding filter pattern="**" type="prometheus"
2019-04-21 04:12:02 +0000 [info]: adding filter pattern="kubernetes.**" type="record_transformer"
2019-04-21 04:12:02 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:02 +0000 [info]: adding match pattern="kubernetes.**" type="google_cloud"
2019-04-21 04:12:03 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:03 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/568548187776111596
2019-04-21 04:12:03 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:03 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:03 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/568548187776111596
2019-04-21 04:12:03 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:03 +0000 [info]: adding filter pattern="**" type="add_insert_ids"
2019-04-21 04:12:03 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:03 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:03 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/568548187776111596
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="exec"
2019-04-21 04:12:03 +0000 [warn]: #0 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="tail"
2019-04-21 04:12:03 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:03 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:03 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:03 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:03 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:03 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:03 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:03 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:03 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:03 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:03 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:03 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:03 +0000 [info]: adding source type="prometheus"
2019-04-21 04:12:03 +0000 [info]: adding source type="prometheus_monitor"
2019-04-21 04:12:03 +0000 [warn]: parameter 'suppress_parse_error_log' in <filter reform.**>
  @type parser
  format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
  reserve_data true
  suppress_parse_error_log true
  emit_invalid_record_to_error false
  key_name "log"
  <parse>
    @type regexp
    expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
  </parse>
</filter> is not used.
2019-04-21 04:12:03 +0000 [info]: #0 starting fluentd worker pid=34 ppid=1 worker=0
2019-04-21 04:12:03 +0000 [info]: #0 Started the add_insert_ids plugin with logging.googleapis.com/insertId as the insert ID key.
2019-04-21 04:12:03 +0000 [info]: #0 Initialized the insert ID key to w9ipkxkckouewapf2.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/kube-proxy.log
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-mzfw_kube-system_kube-proxy-e127f887b306a12b5f947ea1ba0bde32970285e5df52f05253f9e204a170a004.log
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/prometheus-to-sd-pw4vg_kube-system_prometheus-to-sd-3523e896ce1440437a5c095368c49c721c43c41bfa899f256e4d080f9f7b1303.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5_kube-system_prom-to-sd-9ea78cc20b185175b861d975b34a351364127dec192c08cb3eaff049e1cc1946.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-7dmsx_kube-system_prometheus-to-sd-exporter-454276180e1c5d6c0e38cb9b47c4c1377ee371d4e8c02173aac480a909e3d940.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5_kube-system_heapster-nanny-bb8b2f0705efd015b8843f30f435c06ce9f356511fd28d6d7a439c22a3955b53.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-7dmsx_kube-system_fluentd-gcp-dc86def44902541b3ecad928e756ff40c4d66698e542c95a7cbfbfe756975d61.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 following tail of /var/log/containers/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5_kube-system_heapster-d20e30d44f22ba357a388008d973527693414426e22fb81ceac70864db6f3b17.log
2019-04-21 04:12:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:03 +0000 [info]: #0 fluentd worker is now running worker=0
2019-04-21 04:12:05 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 04:12:09 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 04:56:03 +0000 [info]: #0 following tail of /var/log/containers/helloworld-statefull-1_default_k8s-demo-19982a14a5f2c82c4c505cd3187670503aaceb6a0109725ece2c14823f0e237c.log
2019-04-21 04:57:19 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-statefull-1_default_k8s-demo-19982a14a5f2c82c4c505cd3187670503aaceb6a0109725ece2c14823f0e237c.log; waiting 5 seconds
2019-04-21 04:58:03 +0000 [info]: #0 following tail of /var/log/containers/helloworld-statefull-1_default_k8s-demo-e49f24433570102c92536237f0c5131e52c84182deca646245dbf43dcdb3ca2f.log
2019-04-21 05:05:03 +0000 [info]: #0 following tail of /var/log/containers/cassandra-1_default_cassandra-0a9c3e8740726c16c9a88f725acbda55f423726abecb82102936174cec5e2b41.log
2019-04-21 05:05:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 05:19:49 +0000 [info]: #0 detected rotation of /var/log/containers/cassandra-1_default_cassandra-0a9c3e8740726c16c9a88f725acbda55f423726abecb82102936174cec5e2b41.log; waiting 5 seconds
2019-04-21 06:35:03 +0000 [info]: #0 following tail of /var/log/containers/helloworld-deployment-7bc6b64b45-s68s8_myspace_k8s-demo-e7698a28792dc47bd5f2d397b7b9bf554d2df276de81ec2e8e8fa6c2aa51117b.log
2019-04-21 06:35:03 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 06:35:29 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-statefull-1_default_k8s-demo-e49f24433570102c92536237f0c5131e52c84182deca646245dbf43dcdb3ca2f.log; waiting 5 seconds
2019-04-21 06:40:08 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-deployment-7bc6b64b45-s68s8_myspace_k8s-demo-e7698a28792dc47bd5f2d397b7b9bf554d2df276de81ec2e8e8fa6c2aa51117b.log; waiting 5 seconds
==== END logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-7dmsx ====
==== START logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-7dmsx ====
I0421 04:12:01.386888       1 main.go:89] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo Instance:gke-k8s-demo-default-pool-bc3c4575-mzfw MetricsPrefix:container.googleapis.com/internal/addons}
I0421 04:12:01.387265       1 main.go:135] Taking source configs from flags
I0421 04:12:01.387391       1 main.go:137] Taking source configs from kubernetes api server
I0421 04:12:01.387487       1 main.go:92] Built the following source configs: [{fluentd localhost 24231 /metrics [stackdriver_successful_requests_count stackdriver_failed_requests_count stackdriver_ingested_entries_count stackdriver_dropped_entries_count] {fluentd-gcp-v3.2.0-7dmsx kube-system}}]
I0421 04:12:01.387616       1 main.go:163] Running prometheus-to-sd, monitored target is fluentd localhost:24231
==== END logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-7dmsx ====
==== START logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-mx68q ====
2019-04-21 04:12:11 +0000 [info]: parsing config file is succeeded path="/etc/google-fluentd/google-fluentd.conf"
2019-04-21 04:12:12 +0000 [info]: Detected GCE platform
2019-04-21 04:12:12 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/2599055549611267052
2019-04-21 04:12:12 +0000 [info]: Detected GCE platform
2019-04-21 04:12:12 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/2599055549611267052
2019-04-21 04:12:12 +0000 [info]: Detected GCE platform
2019-04-21 04:12:12 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/2599055549611267052
2019-04-21 04:12:12 +0000 [warn]: 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:12 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:12 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:12 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:12 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:12 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:12 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:12 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:12 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:12 +0000 [info]: using configuration file: <ROOT>
  <source>
    @type tail
    path "/var/log/containers/*.log"
    pos_file "/var/log/gcp-containers.log.pos"
    tag "reform.*"
    read_from_head true
    <parse>
      @type "multi_format"
      <pattern>
        format json
        time_key "time"
        time_format "%Y-%m-%dT%H:%M:%S.%NZ"
        time_type string
      </pattern>
      <pattern>
        format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
        time_format "%Y-%m-%dT%H:%M:%S.%N%:z"
        expression ^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$
        ignorecase false
        multiline false
      </pattern>
    </parse>
  </source>
  <filter reform.**>
    @type parser
    format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
    reserve_data true
    suppress_parse_error_log true
    emit_invalid_record_to_error false
    key_name "log"
    <parse>
      @type regexp
      expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
    </parse>
  </filter>
  <match reform.**>
    @type record_reformer
    enable_ruby true
    tag "raw.kubernetes.${tag_suffix[4].split(\'-\')[0..-2].join(\'-\')}"
  </match>
  <match raw.kubernetes.**>
    @type detect_exceptions
    remove_tag_prefix "raw"
    message "log"
    stream "stream"
    multiline_flush_interval 5
    max_bytes 500000
    max_lines 1000
  </match>
  <source>
    @type exec
    command "/bin/sh -c \'date +%s\'"
    tag "process_start"
    time_format %Y-%m-%d %H:%M:%S
    keys process_start_timestamp
    <extract>
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </extract>
    <parse>
      keys process_start_timestamp
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </parse>
  </source>
  <filter process_start>
    @type record_transformer
    enable_ruby true
    auto_typecast true
    <record>
      process_start_timestamp ${record["process_start_timestamp"].to_i}
    </record>
  </filter>
  <match process_start>
    @type prometheus
    <metric>
      type gauge
      name process_start_time_seconds
      desc Timestamp of the process start in seconds
      key process_start_timestamp
    </metric>
  </match>
  <filter **>
    @type prometheus
    <metric>
      type counter
      name logging_entry_count
      desc Total number of log entries generated by either application containers or system components
    </metric>
  </filter>
  <filter kubernetes.**>
    @type record_transformer
    enable_ruby true
    <record>
      log ${record['log'].length > 100000 ? "[Trimmed]#{record['log'][0..100000]}..." : record['log']}
    </record>
  </filter>
  <match fluent.**>
    @type null
  </match>
  <match kubernetes.**>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.containers.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 6
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.containers.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 6
      overflow_action block
    </buffer>
  </match>
  <match **>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    detect_subservice false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.system.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 2
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.system.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 2
      overflow_action block
    </buffer>
  </match>
  <source>
    @type tail
    format syslog
    path "/var/log/startupscript.log"
    pos_file "/var/log/gcp-startupscript.log.pos"
    tag "startupscript"
    <parse>
      @type syslog
    </parse>
  </source>
  <source>
    @type tail
    format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
    path "/var/log/docker.log"
    pos_file "/var/log/gcp-docker.log.pos"
    tag "docker"
    <parse>
      @type regexp
      expression ^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?
    </parse>
  </source>
  <source>
    @type tail
    format none
    path "/var/log/etcd.log"
    pos_file "/var/log/gcp-etcd.log.pos"
    tag "etcd"
    <parse>
      @type none
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kubelet.log"
    pos_file "/var/log/gcp-kubelet.log.pos"
    tag "kubelet"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-proxy.log"
    pos_file "/var/log/gcp-kube-proxy.log.pos"
    tag "kube-proxy"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-apiserver.log"
    pos_file "/var/log/gcp-kube-apiserver.log.pos"
    tag "kube-apiserver"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-controller-manager.log"
    pos_file "/var/log/gcp-kube-controller-manager.log.pos"
    tag "kube-controller-manager"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-scheduler.log"
    pos_file "/var/log/gcp-kube-scheduler.log.pos"
    tag "kube-scheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/rescheduler.log"
    pos_file "/var/log/gcp-rescheduler.log.pos"
    tag "rescheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/glbc.log"
    pos_file "/var/log/gcp-glbc.log.pos"
    tag "glbc"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/cluster-autoscaler.log"
    pos_file "/var/log/gcp-cluster-autoscaler.log.pos"
    tag "cluster-autoscaler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"docker.service"}]
    pos_file "/var/log/gcp-journald-docker.pos"
    read_from_head true
    tag "docker"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"containerd.service"}]
    pos_file "/var/log/gcp-journald-container-runtime.pos"
    read_from_head true
    tag "container-runtime"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"kubelet.service"}]
    pos_file "/var/log/gcp-journald-kubelet.pos"
    read_from_head true
    tag "kubelet"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"node-problem-detector.service"}]
    pos_file "/var/log/gcp-journald-node-problem-detector.pos"
    read_from_head true
    tag "node-problem-detector"
  </source>
  <source>
    @type prometheus
    port 24231
  </source>
  <source>
    @type prometheus_monitor
  </source>
  <match fluent.**>
    @type null
  </match>
  <filter **>
    @type add_insert_ids
  </filter>
  <match **>
    @type google_cloud
    buffer_chunk_limit 1M
    flush_interval 5s
    disable_retry_limit false
    retry_limit 3
    retry_wait 10
    max_retry_wait 300
    num_threads 8
    detect_json true
    enable_metadata_agent true
    metadata_agent_url "http://local-metadata-agent.stackdriver.com:8000"
    use_grpc true
    partial_success true
    enable_monitoring true
    monitoring_type "prometheus"
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      flush_thread_count 8
      flush_interval 5s
      retry_forever false
      retry_max_times 3
      retry_max_interval 300
      chunk_limit_size 1M
    </buffer>
  </match>
</ROOT>
2019-04-21 04:12:12 +0000 [info]: starting fluentd-1.2.5 pid=1 ruby="2.4.3"
2019-04-21 04:12:12 +0000 [info]: spawn command to main:  cmdline=["/opt/google-fluentd/embedded/bin/ruby", "-Eascii-8bit:ascii-8bit", "/usr/sbin/google-fluentd", "--under-supervisor"]
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-mixin-config-placeholders' version '0.4.0'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-mixin-plaintextformatter' version '0.2.6'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-detect-exceptions' version '0.0.10'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-google-cloud' version '0.7.0'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-multi-format-parser' version '0.1.1'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-prometheus' version '0.3.0'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-record-reformer' version '0.9.1'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-rewrite-tag-filter' version '1.5.5'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-s3' version '0.8.4'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-scribe' version '0.10.14'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-systemd' version '0.3.0'
2019-04-21 04:12:12 +0000 [info]: gem 'fluent-plugin-webhdfs' version '0.4.2'
2019-04-21 04:12:12 +0000 [info]: gem 'fluentd' version '1.2.5'
2019-04-21 04:12:12 +0000 [info]: gem 'fluentd' version '0.14.25'
2019-04-21 04:12:12 +0000 [info]: adding filter pattern="reform.**" type="parser"
2019-04-21 04:12:12 +0000 [info]: adding match pattern="reform.**" type="record_reformer"
2019-04-21 04:12:12 +0000 [info]: adding match pattern="raw.kubernetes.**" type="detect_exceptions"
2019-04-21 04:12:12 +0000 [info]: adding filter pattern="process_start" type="record_transformer"
2019-04-21 04:12:12 +0000 [info]: adding match pattern="process_start" type="prometheus"
2019-04-21 04:12:12 +0000 [info]: adding filter pattern="**" type="prometheus"
2019-04-21 04:12:12 +0000 [info]: adding filter pattern="kubernetes.**" type="record_transformer"
2019-04-21 04:12:12 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:12 +0000 [info]: adding match pattern="kubernetes.**" type="google_cloud"
2019-04-21 04:12:13 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:13 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/2599055549611267052
2019-04-21 04:12:13 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:13 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:13 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/2599055549611267052
2019-04-21 04:12:13 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:13 +0000 [info]: adding filter pattern="**" type="add_insert_ids"
2019-04-21 04:12:13 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:13 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:13 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/2599055549611267052
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="exec"
2019-04-21 04:12:13 +0000 [warn]: #0 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="tail"
2019-04-21 04:12:13 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:13 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:13 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:13 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:13 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:13 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:13 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:13 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:13 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:13 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:13 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:13 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:13 +0000 [info]: adding source type="prometheus"
2019-04-21 04:12:13 +0000 [info]: adding source type="prometheus_monitor"
2019-04-21 04:12:13 +0000 [warn]: parameter 'suppress_parse_error_log' in <filter reform.**>
  @type parser
  format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
  reserve_data true
  suppress_parse_error_log true
  emit_invalid_record_to_error false
  key_name "log"
  <parse>
    @type regexp
    expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
  </parse>
</filter> is not used.
2019-04-21 04:12:13 +0000 [info]: #0 starting fluentd worker pid=30 ppid=1 worker=0
2019-04-21 04:12:13 +0000 [info]: #0 Started the add_insert_ids plugin with logging.googleapis.com/insertId as the insert ID key.
2019-04-21 04:12:13 +0000 [info]: #0 Initialized the insert ID key to wds92hsgtx7u8ir6g.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/kube-proxy.log
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-mx68q_kube-system_fluentd-gcp-2ca14ae411b6ae5c7705c2a61fcb9f4103b4030f9362c673e908363472db0b40.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-m2rkt_kube-system_kubedns-e07d9be1be5df2319609030e603af35354bf4e6d30542f0e45b4f9391368e122.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-mx4fs_kube-system_dnsmasq-4e33fd0b00462148f56f45b2a97ce56a2fd88ccbb7b2133e38a1b525c5032c67.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-mx4fs_kube-system_prometheus-to-sd-3a617b57411b144dd5632ee16cf55b75c697181c5dcc027f2a396b7bf9456e10.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-m2rkt_kube-system_prometheus-to-sd-2dcf124b4d8ba37f65223d84121a5d163ba858d9c3488f553526e1be405e8c7f.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-mx68q_kube-system_prometheus-to-sd-exporter-b73f03270ad7c0255011fe947d741479220c0bca02750139ba2ceb28b5473924.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/event-exporter-v0.2.3-85644fcdf-d6nv2_kube-system_prometheus-to-sd-exporter-3e2e259a7f550e48bc9f88a1573e1a4941a0b28777b23562581fe23cec355201.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-scaler-8b674f786-dwsxw_kube-system_fluentd-gcp-scaler-77a8e33f288de7331eac855dfc747d78740e861d8d65bd26189e73665ff4c116.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-mx4fs_kube-system_sidecar-4b602eeda350a5416b69fd64b7d07a48769f3fe436fe541aa5b6584e74b80b5f.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-mx4fs_kube-system_kubedns-69c8c898e533c16a0337d6ed9044586f67c3986f429b6c3f70cf44f973a53514.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-m2rkt_kube-system_sidecar-f0e65ca10bcbfc4a560511febac3e078c251ac03c99cda1c6f49dfb4e1a9dc3a.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-9jxq_kube-system_kube-proxy-79f512d8a14228439252c9480a444d7a53d0bc2ad01d7c4a5829c3c3d904b76d.log
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/l7-default-backend-7ff48cffd7-zh6cc_kube-system_default-http-backend-591ca33653bdbe6227f5bfcb9a2cca26b1b41f5a070de05a87573e0d2edca86c.log
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-autoscaler-67c97c87fb-6l4rd_kube-system_autoscaler-5d4dbd71d073c24917fbfa2215a69a7e7f46ac11c7217c7d74de20ead4078f58.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/prometheus-to-sd-d2mnk_kube-system_prometheus-to-sd-df654e64ea46ba2a7ba923a515ca67553722220ffa01737054c3bf8246d5e35c.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/kube-dns-7df4cb66cb-m2rkt_kube-system_dnsmasq-a506a9b4b0e4d8337a7dda3f57b11140e50491b086a8f3471fe7e7859d5dd960.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 following tail of /var/log/containers/event-exporter-v0.2.3-85644fcdf-d6nv2_kube-system_event-exporter-db12e2b565677574447950e14201706fbfdbd54afe7b0d414948ff65e750a008.log
2019-04-21 04:12:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:13 +0000 [info]: #0 fluentd worker is now running worker=0
2019-04-21 04:12:15 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 04:12:18 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 05:06:13 +0000 [info]: #0 following tail of /var/log/containers/cassandra-2_default_cassandra-bf69bdce00312170d6bf51db10ed2b5f343d2c9d16dfa650dbee8549b6a70d2f.log
2019-04-21 05:06:13 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 05:17:41 +0000 [info]: #0 detected rotation of /var/log/containers/cassandra-2_default_cassandra-bf69bdce00312170d6bf51db10ed2b5f343d2c9d16dfa650dbee8549b6a70d2f.log; waiting 5 seconds
2019-04-21 05:18:13 +0000 [info]: #0 following tail of /var/log/containers/cassandra-2_default_cassandra-0a43a005e6db532e345318516e5a276a13ea9e2ce6a061374a8597eb4f06457b.log
2019-04-21 05:19:47 +0000 [info]: #0 detected rotation of /var/log/containers/cassandra-2_default_cassandra-0a43a005e6db532e345318516e5a276a13ea9e2ce6a061374a8597eb4f06457b.log; waiting 5 seconds
==== END logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-mx68q ====
==== START logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-mx68q ====
I0421 04:12:11.156917       1 main.go:89] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo Instance:gke-k8s-demo-default-pool-bc3c4575-9jxq MetricsPrefix:container.googleapis.com/internal/addons}
I0421 04:12:11.157421       1 main.go:135] Taking source configs from flags
I0421 04:12:11.157584       1 main.go:137] Taking source configs from kubernetes api server
I0421 04:12:11.157689       1 main.go:92] Built the following source configs: [{fluentd localhost 24231 /metrics [stackdriver_successful_requests_count stackdriver_failed_requests_count stackdriver_ingested_entries_count stackdriver_dropped_entries_count] {fluentd-gcp-v3.2.0-mx68q kube-system}}]
I0421 04:12:11.157866       1 main.go:163] Running prometheus-to-sd, monitored target is fluentd localhost:24231
==== END logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-mx68q ====
==== START logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-zdgd4 ====
2019-04-21 04:12:10 +0000 [info]: parsing config file is succeeded path="/etc/google-fluentd/google-fluentd.conf"
2019-04-21 04:12:10 +0000 [info]: Detected GCE platform
2019-04-21 04:12:10 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/4029239419630670828
2019-04-21 04:12:10 +0000 [info]: Detected GCE platform
2019-04-21 04:12:10 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/4029239419630670828
2019-04-21 04:12:10 +0000 [info]: Detected GCE platform
2019-04-21 04:12:10 +0000 [info]: Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/4029239419630670828
2019-04-21 04:12:10 +0000 [warn]: 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:10 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:10 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:10 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:10 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:10 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:10 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:10 +0000 [warn]: 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:10 +0000 [warn]: both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:10 +0000 [info]: using configuration file: <ROOT>
  <source>
    @type tail
    path "/var/log/containers/*.log"
    pos_file "/var/log/gcp-containers.log.pos"
    tag "reform.*"
    read_from_head true
    <parse>
      @type "multi_format"
      <pattern>
        format json
        time_key "time"
        time_format "%Y-%m-%dT%H:%M:%S.%NZ"
        time_type string
      </pattern>
      <pattern>
        format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
        time_format "%Y-%m-%dT%H:%M:%S.%N%:z"
        expression ^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$
        ignorecase false
        multiline false
      </pattern>
    </parse>
  </source>
  <filter reform.**>
    @type parser
    format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
    reserve_data true
    suppress_parse_error_log true
    emit_invalid_record_to_error false
    key_name "log"
    <parse>
      @type regexp
      expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
    </parse>
  </filter>
  <match reform.**>
    @type record_reformer
    enable_ruby true
    tag "raw.kubernetes.${tag_suffix[4].split(\'-\')[0..-2].join(\'-\')}"
  </match>
  <match raw.kubernetes.**>
    @type detect_exceptions
    remove_tag_prefix "raw"
    message "log"
    stream "stream"
    multiline_flush_interval 5
    max_bytes 500000
    max_lines 1000
  </match>
  <source>
    @type exec
    command "/bin/sh -c \'date +%s\'"
    tag "process_start"
    time_format %Y-%m-%d %H:%M:%S
    keys process_start_timestamp
    <extract>
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </extract>
    <parse>
      keys process_start_timestamp
      time_format %Y-%m-%d %H:%M:%S
      time_type string
    </parse>
  </source>
  <filter process_start>
    @type record_transformer
    enable_ruby true
    auto_typecast true
    <record>
      process_start_timestamp ${record["process_start_timestamp"].to_i}
    </record>
  </filter>
  <match process_start>
    @type prometheus
    <metric>
      type gauge
      name process_start_time_seconds
      desc Timestamp of the process start in seconds
      key process_start_timestamp
    </metric>
  </match>
  <filter **>
    @type prometheus
    <metric>
      type counter
      name logging_entry_count
      desc Total number of log entries generated by either application containers or system components
    </metric>
  </filter>
  <filter kubernetes.**>
    @type record_transformer
    enable_ruby true
    <record>
      log ${record['log'].length > 100000 ? "[Trimmed]#{record['log'][0..100000]}..." : record['log']}
    </record>
  </filter>
  <match fluent.**>
    @type null
  </match>
  <match kubernetes.**>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.containers.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 6
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.containers.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 6
      overflow_action block
    </buffer>
  </match>
  <match **>
    @type google_cloud
    detect_json true
    enable_monitoring true
    monitoring_type "prometheus"
    split_logs_by_tag false
    detect_subservice false
    buffer_type "file"
    buffer_path /var/log/fluentd-buffers/kubernetes.system.buffer
    buffer_queue_full_action block
    buffer_chunk_limit 1M
    buffer_queue_limit 2
    flush_interval 5s
    max_retry_wait 30
    disable_retry_limit 
    num_threads 2
    use_grpc true
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      @type file
      path /var/log/fluentd-buffers/kubernetes.system.buffer
      flush_thread_count 2
      flush_interval 5s
      retry_forever 
      retry_max_interval 30
      chunk_limit_size 1M
      queue_limit_length 2
      overflow_action block
    </buffer>
  </match>
  <source>
    @type tail
    format syslog
    path "/var/log/startupscript.log"
    pos_file "/var/log/gcp-startupscript.log.pos"
    tag "startupscript"
    <parse>
      @type syslog
    </parse>
  </source>
  <source>
    @type tail
    format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
    path "/var/log/docker.log"
    pos_file "/var/log/gcp-docker.log.pos"
    tag "docker"
    <parse>
      @type regexp
      expression ^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?
    </parse>
  </source>
  <source>
    @type tail
    format none
    path "/var/log/etcd.log"
    pos_file "/var/log/gcp-etcd.log.pos"
    tag "etcd"
    <parse>
      @type none
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kubelet.log"
    pos_file "/var/log/gcp-kubelet.log.pos"
    tag "kubelet"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-proxy.log"
    pos_file "/var/log/gcp-kube-proxy.log.pos"
    tag "kube-proxy"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-apiserver.log"
    pos_file "/var/log/gcp-kube-apiserver.log.pos"
    tag "kube-apiserver"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-controller-manager.log"
    pos_file "/var/log/gcp-kube-controller-manager.log.pos"
    tag "kube-controller-manager"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/kube-scheduler.log"
    pos_file "/var/log/gcp-kube-scheduler.log.pos"
    tag "kube-scheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/rescheduler.log"
    pos_file "/var/log/gcp-rescheduler.log.pos"
    tag "rescheduler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/glbc.log"
    pos_file "/var/log/gcp-glbc.log.pos"
    tag "glbc"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type tail
    format multiline
    multiline_flush_interval 5s
    format_firstline /^\w\d{4}/
    format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    time_format %m%d %H:%M:%S.%N
    path "/var/log/cluster-autoscaler.log"
    pos_file "/var/log/gcp-cluster-autoscaler.log.pos"
    tag "cluster-autoscaler"
    <parse>
      time_format %m%d %H:%M:%S.%N
      format_firstline /^\w\d{4}/
      @type multiline
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    </parse>
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"docker.service"}]
    pos_file "/var/log/gcp-journald-docker.pos"
    read_from_head true
    tag "docker"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"containerd.service"}]
    pos_file "/var/log/gcp-journald-container-runtime.pos"
    read_from_head true
    tag "container-runtime"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"kubelet.service"}]
    pos_file "/var/log/gcp-journald-kubelet.pos"
    read_from_head true
    tag "kubelet"
  </source>
  <source>
    @type systemd
    filters [{"_SYSTEMD_UNIT":"node-problem-detector.service"}]
    pos_file "/var/log/gcp-journald-node-problem-detector.pos"
    read_from_head true
    tag "node-problem-detector"
  </source>
  <source>
    @type prometheus
    port 24231
  </source>
  <source>
    @type prometheus_monitor
  </source>
  <match fluent.**>
    @type null
  </match>
  <filter **>
    @type add_insert_ids
  </filter>
  <match **>
    @type google_cloud
    buffer_chunk_limit 1M
    flush_interval 5s
    disable_retry_limit false
    retry_limit 3
    retry_wait 10
    max_retry_wait 300
    num_threads 8
    detect_json true
    enable_metadata_agent true
    metadata_agent_url "http://local-metadata-agent.stackdriver.com:8000"
    use_grpc true
    partial_success true
    enable_monitoring true
    monitoring_type "prometheus"
    <buffer>
      flush_mode interval
      retry_type exponential_backoff
      flush_thread_count 8
      flush_interval 5s
      retry_forever false
      retry_max_times 3
      retry_max_interval 300
      chunk_limit_size 1M
    </buffer>
  </match>
</ROOT>
2019-04-21 04:12:10 +0000 [info]: starting fluentd-1.2.5 pid=1 ruby="2.4.3"
2019-04-21 04:12:10 +0000 [info]: spawn command to main:  cmdline=["/opt/google-fluentd/embedded/bin/ruby", "-Eascii-8bit:ascii-8bit", "/usr/sbin/google-fluentd", "--under-supervisor"]
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-mixin-config-placeholders' version '0.4.0'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-mixin-plaintextformatter' version '0.2.6'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-detect-exceptions' version '0.0.10'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-google-cloud' version '0.7.0'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-multi-format-parser' version '0.1.1'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-prometheus' version '0.3.0'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-record-reformer' version '0.9.1'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-rewrite-tag-filter' version '1.5.5'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-s3' version '0.8.4'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-scribe' version '0.10.14'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-systemd' version '0.3.0'
2019-04-21 04:12:11 +0000 [info]: gem 'fluent-plugin-webhdfs' version '0.4.2'
2019-04-21 04:12:11 +0000 [info]: gem 'fluentd' version '1.2.5'
2019-04-21 04:12:11 +0000 [info]: gem 'fluentd' version '0.14.25'
2019-04-21 04:12:11 +0000 [info]: adding filter pattern="reform.**" type="parser"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="reform.**" type="record_reformer"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="raw.kubernetes.**" type="detect_exceptions"
2019-04-21 04:12:11 +0000 [info]: adding filter pattern="process_start" type="record_transformer"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="process_start" type="prometheus"
2019-04-21 04:12:11 +0000 [info]: adding filter pattern="**" type="prometheus"
2019-04-21 04:12:11 +0000 [info]: adding filter pattern="kubernetes.**" type="record_transformer"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="kubernetes.**" type="google_cloud"
2019-04-21 04:12:11 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:11 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/4029239419630670828
2019-04-21 04:12:11 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:11 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:11 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=gce_instance/instance_id/4029239419630670828
2019-04-21 04:12:11 +0000 [info]: adding match pattern="fluent.**" type="null"
2019-04-21 04:12:11 +0000 [info]: adding filter pattern="**" type="add_insert_ids"
2019-04-21 04:12:11 +0000 [info]: adding match pattern="**" type="google_cloud"
2019-04-21 04:12:11 +0000 [info]: #0 Detected GCE platform
2019-04-21 04:12:11 +0000 [info]: #0 Logs viewer address: https://console.cloud.google.com/logs/viewer?project=sapient-office-218912&resource=container/instance_id/4029239419630670828
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="exec"
2019-04-21 04:12:11 +0000 [warn]: #0 'time_format' specified without 'time_key', will be ignored
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="tail"
2019-04-21 04:12:11 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:11 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:11 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:11 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:11 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:11 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:11 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:11 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:11 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:11 +0000 [info]: adding source type="systemd"
2019-04-21 04:12:11 +0000 [warn]: #0 'pos_file' parameter is deprecated: Use <storage> section with `persistent: true' instead
2019-04-21 04:12:11 +0000 [warn]: #0 both of Plugin @id and path for <storage> are not specified. Using on-memory store.
2019-04-21 04:12:11 +0000 [info]: adding source type="prometheus"
2019-04-21 04:12:11 +0000 [info]: adding source type="prometheus_monitor"
2019-04-21 04:12:11 +0000 [warn]: parameter 'suppress_parse_error_log' in <filter reform.**>
  @type parser
  format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
  reserve_data true
  suppress_parse_error_log true
  emit_invalid_record_to_error false
  key_name "log"
  <parse>
    @type regexp
    expression ^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)
  </parse>
</filter> is not used.
2019-04-21 04:12:11 +0000 [info]: #0 starting fluentd worker pid=31 ppid=1 worker=0
2019-04-21 04:12:11 +0000 [info]: #0 Started the add_insert_ids plugin with logging.googleapis.com/insertId as the insert ID key.
2019-04-21 04:12:11 +0000 [info]: #0 Initialized the insert ID key to 3ku0e4k3p0our7720.
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/kube-proxy.log
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/metrics-server-v0.2.1-fd596d746-h99sk_kube-system_metrics-server-44a7e341bb479e3688995106ab733125de2a6c3fcfd9e15159ebcb76def54266.log
2019-04-21 04:12:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-qmwj_kube-system_kube-proxy-0916401034d39c6ff63ece5a1327212e869e1544105f23360443b40110bde422.log
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-zdgd4_kube-system_fluentd-gcp-50a05fc548232d09888e9aa2d2467e5ef1526c28d9d0ac68beb98f3375dbfa07.log
2019-04-21 04:12:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/prometheus-to-sd-c82zs_kube-system_prometheus-to-sd-1455ad39f24b82784ef0e8b7a5817867457e04d76913c537662da46536995674.log
2019-04-21 04:12:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/fluentd-gcp-v3.2.0-zdgd4_kube-system_prometheus-to-sd-exporter-b018cb993fbc4c238434ef61feaca7310d6c9055e46c0047245e53064d129a3b.log
2019-04-21 04:12:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:12 +0000 [info]: #0 following tail of /var/log/containers/metrics-server-v0.2.1-fd596d746-h99sk_kube-system_metrics-server-nanny-64f6db8fa19f1c6f56cb97b7f7e391330d81b0d839d6116ec117f7bd288ed524.log
2019-04-21 04:12:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 04:12:12 +0000 [info]: #0 fluentd worker is now running worker=0
2019-04-21 04:12:13 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 04:12:18 +0000 [info]: #0 Successfully sent gRPC to Stackdriver Logging API.
2019-04-21 04:56:12 +0000 [info]: #0 following tail of /var/log/containers/helloworld-statefull-0_default_k8s-demo-11831d39b92f504aaea7d02f482cc175eca8b051253b150f9ebe68e2d7f86879.log
2019-04-21 04:56:12 +0000 [info]: #0 following tail of /var/log/containers/helloworld-statefull-2_default_k8s-demo-02837933fd3dc579358295b06130df6df14d42732def2d34bbd5451998813112.log
2019-04-21 05:04:12 +0000 [info]: #0 following tail of /var/log/containers/cassandra-0_default_cassandra-e147e98af1e1617d851e79dd7f5005252172b093be33c11ee798c353fbfcbe32.log
2019-04-21 05:04:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 05:19:47 +0000 [info]: #0 detected rotation of /var/log/containers/cassandra-0_default_cassandra-e147e98af1e1617d851e79dd7f5005252172b093be33c11ee798c353fbfcbe32.log; waiting 5 seconds
2019-04-21 06:35:12 +0000 [info]: #0 following tail of /var/log/containers/helloworld-deployment-7bc6b64b45-pmrjf_myspace_k8s-demo-5b0dc00cc3b339521dd213d659c8ee78fc8b9d1a4446a6436f33bad163538173.log
2019-04-21 06:35:12 +0000 [info]: #0 disable filter chain optimization because [Fluent::PrometheusFilter, Fluent::Plugin::RecordTransformerFilter] uses `#filter_stream` method.
2019-04-21 06:35:28 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-statefull-2_default_k8s-demo-02837933fd3dc579358295b06130df6df14d42732def2d34bbd5451998813112.log; waiting 5 seconds
2019-04-21 06:35:28 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-statefull-0_default_k8s-demo-11831d39b92f504aaea7d02f482cc175eca8b051253b150f9ebe68e2d7f86879.log; waiting 5 seconds
2019-04-21 06:40:08 +0000 [info]: #0 detected rotation of /var/log/containers/helloworld-deployment-7bc6b64b45-pmrjf_myspace_k8s-demo-5b0dc00cc3b339521dd213d659c8ee78fc8b9d1a4446a6436f33bad163538173.log; waiting 5 seconds
==== END logs for container fluentd-gcp of pod kube-system/fluentd-gcp-v3.2.0-zdgd4 ====
==== START logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-zdgd4 ====
I0421 04:12:09.954937       1 main.go:89] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo Instance:gke-k8s-demo-default-pool-bc3c4575-qmwj MetricsPrefix:container.googleapis.com/internal/addons}
I0421 04:12:09.955332       1 main.go:135] Taking source configs from flags
I0421 04:12:09.955493       1 main.go:137] Taking source configs from kubernetes api server
I0421 04:12:09.955586       1 main.go:92] Built the following source configs: [{fluentd localhost 24231 /metrics [stackdriver_successful_requests_count stackdriver_failed_requests_count stackdriver_ingested_entries_count stackdriver_dropped_entries_count] {fluentd-gcp-v3.2.0-zdgd4 kube-system}}]
I0421 04:12:09.955728       1 main.go:163] Running prometheus-to-sd, monitored target is fluentd localhost:24231
==== END logs for container prometheus-to-sd-exporter of pod kube-system/fluentd-gcp-v3.2.0-zdgd4 ====
==== START logs for container heapster of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
I0421 04:11:56.856321       1 heapster.go:79] /heapster --source=kubernetes.summary_api:?host_id_annotation=container.googleapis.com/instance_id --sink=stackdriver:?cluster_name=k8s-demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110&cluster_location=us-central1-a
I0421 04:11:56.856412       1 heapster.go:80] Heapster version v1.6.0-beta.1
I0421 04:11:56.856907       1 configs.go:61] Using Kubernetes client with master "https://10.3.240.1:443" and version v1
I0421 04:11:56.856960       1 configs.go:62] Using kubelet port 10255
I0421 04:11:56.863822       1 gce.go:37] Waiting for GCE metadata to be available
I0421 04:11:56.875647       1 stackdriver.go:408] Created Stackdriver sink
I0421 04:11:56.875675       1 heapster.go:203] Starting with Stackdriver Sink
I0421 04:11:56.875680       1 heapster.go:203] Starting with Metric Sink
I0421 04:11:57.249076       1 heapster.go:113] Starting heapster on port 8082
==== END logs for container heapster of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
==== START logs for container prom-to-sd of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
I0421 04:11:55.406188       1 main.go:89] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo Instance:gke-k8s-demo-default-pool-bc3c4575-mzfw MetricsPrefix:container.googleapis.com/internal/addons}
I0421 04:11:55.406299       1 main.go:135] Taking source configs from flags
I0421 04:11:55.406514       1 main.go:137] Taking source configs from kubernetes api server
I0421 04:11:55.406554       1 main.go:92] Built the following source configs: [{heapster localhost 8082 /metrics [stackdriver_requests_count stackdriver_timeseries_count] {heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 kube-system}}]
I0421 04:11:55.406823       1 main.go:163] Running prometheus-to-sd, monitored target is heapster localhost:8082
==== END logs for container prom-to-sd of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
==== START logs for container heapster-nanny of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
ERROR: logging before flag.Parse: I0421 04:11:58.351509       1 pod_nanny.go:64] Invoked by [/pod_nanny --config-dir=/etc/config --cpu=80m --extra-cpu=0.5m --memory=140Mi --extra-memory=4Mi --threshold=5 --deployment=heapster-v1.6.0-beta.1 --container=heapster --poll-period=300000 --estimator=exponential]
ERROR: logging before flag.Parse: I0421 04:11:58.352080       1 pod_nanny.go:76] Watching namespace: kube-system, pod: heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5, container: heapster.
ERROR: logging before flag.Parse: I0421 04:11:58.352107       1 pod_nanny.go:77] storage: MISSING, extra_storage: 0Gi
ERROR: logging before flag.Parse: I0421 04:11:58.449234       1 pod_nanny.go:166] MISSING
ERROR: logging before flag.Parse: I0421 04:11:58.552464       1 pod_nanny.go:101] cpu: 80m, extra_cpu: 0.5m, memory: 140Mi, extra_memory: 4Mi
ERROR: logging before flag.Parse: I0421 04:11:58.552582       1 pod_nanny.go:130] Resources: [{Base:{i:{value:80 scale:-3} d:{Dec:<nil>} s:80m Format:DecimalSI} ExtraPerNode:{i:{value:5 scale:-4} d:{Dec:<nil>} s: Format:DecimalSI} Name:cpu} {Base:{i:{value:146800640 scale:0} d:{Dec:<nil>} s:140Mi Format:BinarySI} ExtraPerNode:{i:{value:4194304 scale:0} d:{Dec:<nil>} s:4Mi Format:BinarySI} Name:memory}]
==== END logs for container heapster-nanny of pod kube-system/heapster-v1.6.0-beta.1-69bffcb9dd-vw2h5 ====
==== START logs for container kubedns of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
I0421 04:11:45.005588       1 dns.go:48] version: 1.14.13
I0421 04:11:45.007719       1 server.go:69] Using configuration read from directory: /kube-dns-config with period 10s
I0421 04:11:45.007844       1 server.go:121] FLAG: --alsologtostderr="false"
I0421 04:11:45.007899       1 server.go:121] FLAG: --config-dir="/kube-dns-config"
I0421 04:11:45.007938       1 server.go:121] FLAG: --config-map=""
I0421 04:11:45.007998       1 server.go:121] FLAG: --config-map-namespace="kube-system"
I0421 04:11:45.008033       1 server.go:121] FLAG: --config-period="10s"
I0421 04:11:45.008098       1 server.go:121] FLAG: --dns-bind-address="0.0.0.0"
I0421 04:11:45.008129       1 server.go:121] FLAG: --dns-port="10053"
I0421 04:11:45.008183       1 server.go:121] FLAG: --domain="cluster.local."
I0421 04:11:45.008234       1 server.go:121] FLAG: --federations=""
I0421 04:11:45.008291       1 server.go:121] FLAG: --healthz-port="8081"
I0421 04:11:45.008326       1 server.go:121] FLAG: --initial-sync-timeout="1m0s"
I0421 04:11:45.008378       1 server.go:121] FLAG: --kube-master-url=""
I0421 04:11:45.008414       1 server.go:121] FLAG: --kubecfg-file=""
I0421 04:11:45.008464       1 server.go:121] FLAG: --log-backtrace-at=":0"
I0421 04:11:45.008500       1 server.go:121] FLAG: --log-dir=""
I0421 04:11:45.008560       1 server.go:121] FLAG: --log-flush-frequency="5s"
I0421 04:11:45.008595       1 server.go:121] FLAG: --logtostderr="true"
I0421 04:11:45.008645       1 server.go:121] FLAG: --nameservers=""
I0421 04:11:45.008678       1 server.go:121] FLAG: --stderrthreshold="2"
I0421 04:11:45.008739       1 server.go:121] FLAG: --v="2"
I0421 04:11:45.008775       1 server.go:121] FLAG: --version="false"
I0421 04:11:45.008829       1 server.go:121] FLAG: --vmodule=""
I0421 04:11:45.009030       1 server.go:169] Starting SkyDNS server (0.0.0.0:10053)
I0421 04:11:45.009496       1 server.go:179] Skydns metrics enabled (/metrics:10055)
I0421 04:11:45.009571       1 dns.go:188] Starting endpointsController
I0421 04:11:45.009607       1 dns.go:191] Starting serviceController
I0421 04:11:45.010191       1 dns.go:184] Configuration updated: {TypeMeta:{Kind: APIVersion:} Federations:map[] StubDomains:map[] UpstreamNameservers:[]}
I0421 04:11:45.010679       1 logs.go:41] skydns: ready for queries on cluster.local. for tcp://0.0.0.0:10053 [rcache 0]
I0421 04:11:45.010761       1 logs.go:41] skydns: ready for queries on cluster.local. for udp://0.0.0.0:10053 [rcache 0]
I0421 04:11:45.511077       1 dns.go:222] Initialized services and endpoints from apiserver
I0421 04:11:45.512092       1 server.go:137] Setting up Healthz Handler (/readiness)
I0421 04:11:45.512136       1 server.go:142] Setting up cache handler (/cache)
I0421 04:11:45.512154       1 server.go:128] Status HTTP port 8081
I0421 05:02:54.685089       1 dns.go:601] Could not find endpoints for service "cassandra" in namespace "default". DNS records will be created once endpoints show up.
==== END logs for container kubedns of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
==== START logs for container dnsmasq of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
I0421 04:11:47.747118       1 main.go:74] opts: {{/usr/sbin/dnsmasq [-k --cache-size=1000 --no-negcache --log-facility=- --server=/cluster.local/127.0.0.1#10053 --server=/in-addr.arpa/127.0.0.1#10053 --server=/ip6.arpa/127.0.0.1#10053] true} /etc/k8s/dns/dnsmasq-nanny 10000000000}
I0421 04:11:47.747331       1 nanny.go:94] Starting dnsmasq [-k --cache-size=1000 --no-negcache --log-facility=- --server=/cluster.local/127.0.0.1#10053 --server=/in-addr.arpa/127.0.0.1#10053 --server=/ip6.arpa/127.0.0.1#10053]
I0421 04:11:48.460923       1 nanny.go:116] dnsmasq[15]: started, version 2.78 cachesize 1000
I0421 04:11:48.461285       1 nanny.go:116] dnsmasq[15]: compile time options: IPv6 GNU-getopt no-DBus no-i18n no-IDN DHCP DHCPv6 no-Lua TFTP no-conntrack ipset auth no-DNSSEC loop-detect inotify
I0421 04:11:48.461302       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain ip6.arpa 
I0421 04:11:48.461309       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain in-addr.arpa 
I0421 04:11:48.461315       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain cluster.local 
I0421 04:11:48.461322       1 nanny.go:116] dnsmasq[15]: reading /etc/resolv.conf
I0421 04:11:48.461485       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain ip6.arpa 
I0421 04:11:48.461492       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain in-addr.arpa 
I0421 04:11:48.461498       1 nanny.go:116] dnsmasq[15]: using nameserver 127.0.0.1#10053 for domain cluster.local 
I0421 04:11:48.461504       1 nanny.go:116] dnsmasq[15]: using nameserver 169.254.169.254#53
I0421 04:11:48.461511       1 nanny.go:116] dnsmasq[15]: read /etc/hosts - 7 addresses
I0421 04:11:48.460930       1 nanny.go:119] 
W0421 04:11:48.461538       1 nanny.go:120] Got EOF from stdout
==== END logs for container dnsmasq of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
==== START logs for container sidecar of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
I0421 04:11:49.950578       1 main.go:51] Version v1.14.13
I0421 04:11:49.950731       1 server.go:45] Starting server (options {DnsMasqPort:53 DnsMasqAddr:127.0.0.1 DnsMasqPollIntervalMs:5000 Probes:[{Label:kubedns Server:127.0.0.1:10053 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33} {Label:dnsmasq Server:127.0.0.1:53 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}] PrometheusAddr:0.0.0.0 PrometheusPort:10054 PrometheusPath:/metrics PrometheusNamespace:kubedns})
I0421 04:11:49.950787       1 dnsprobe.go:75] Starting dnsProbe {Label:kubedns Server:127.0.0.1:10053 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}
I0421 04:11:49.950853       1 dnsprobe.go:75] Starting dnsProbe {Label:dnsmasq Server:127.0.0.1:53 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}
==== END logs for container sidecar of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
==== START logs for container prometheus-to-sd of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
I0421 04:11:51.340353       1 main.go:82] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo ClusterLocation: Instance:gke-k8s-demo-default-pool-bc3c4575-9jxq MetricsPrefix:container.googleapis.com/internal/addons MonitoredResourceTypes:gke_container}
I0421 04:11:51.340505       1 main.go:122] Taking source configs from flags
I0421 04:11:51.340585       1 main.go:124] Taking source configs from kubernetes api server
I0421 04:11:51.340631       1 main.go:85] Built the following source configs: [{kubedns localhost 10054 /metrics [probe_kubedns_latency_ms probe_kubedns_errors dnsmasq_misses dnsmasq_hits] 0xc4202d0cd0}]
I0421 04:11:51.340734       1 main.go:133] Running prometheus-to-sd, monitored target is kubedns localhost:10054
==== END logs for container prometheus-to-sd of pod kube-system/kube-dns-7df4cb66cb-m2rkt ====
==== START logs for container kubedns of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
I0421 04:11:48.168738       1 dns.go:48] version: 1.14.13
I0421 04:11:48.170303       1 server.go:69] Using configuration read from directory: /kube-dns-config with period 10s
I0421 04:11:48.170375       1 server.go:121] FLAG: --alsologtostderr="false"
I0421 04:11:48.170386       1 server.go:121] FLAG: --config-dir="/kube-dns-config"
I0421 04:11:48.170394       1 server.go:121] FLAG: --config-map=""
I0421 04:11:48.170400       1 server.go:121] FLAG: --config-map-namespace="kube-system"
I0421 04:11:48.170406       1 server.go:121] FLAG: --config-period="10s"
I0421 04:11:48.170414       1 server.go:121] FLAG: --dns-bind-address="0.0.0.0"
I0421 04:11:48.170420       1 server.go:121] FLAG: --dns-port="10053"
I0421 04:11:48.170429       1 server.go:121] FLAG: --domain="cluster.local."
I0421 04:11:48.170437       1 server.go:121] FLAG: --federations=""
I0421 04:11:48.170444       1 server.go:121] FLAG: --healthz-port="8081"
I0421 04:11:48.170450       1 server.go:121] FLAG: --initial-sync-timeout="1m0s"
I0421 04:11:48.170456       1 server.go:121] FLAG: --kube-master-url=""
I0421 04:11:48.170463       1 server.go:121] FLAG: --kubecfg-file=""
I0421 04:11:48.170469       1 server.go:121] FLAG: --log-backtrace-at=":0"
I0421 04:11:48.170477       1 server.go:121] FLAG: --log-dir=""
I0421 04:11:48.170484       1 server.go:121] FLAG: --log-flush-frequency="5s"
I0421 04:11:48.170490       1 server.go:121] FLAG: --logtostderr="true"
I0421 04:11:48.170496       1 server.go:121] FLAG: --nameservers=""
I0421 04:11:48.170501       1 server.go:121] FLAG: --stderrthreshold="2"
I0421 04:11:48.170507       1 server.go:121] FLAG: --v="2"
I0421 04:11:48.170512       1 server.go:121] FLAG: --version="false"
I0421 04:11:48.170521       1 server.go:121] FLAG: --vmodule=""
I0421 04:11:48.170813       1 server.go:169] Starting SkyDNS server (0.0.0.0:10053)
I0421 04:11:48.171198       1 server.go:179] Skydns metrics enabled (/metrics:10055)
I0421 04:11:48.171216       1 dns.go:188] Starting endpointsController
I0421 04:11:48.171223       1 dns.go:191] Starting serviceController
I0421 04:11:48.171324       1 dns.go:184] Configuration updated: {TypeMeta:{Kind: APIVersion:} Federations:map[] StubDomains:map[] UpstreamNameservers:[]}
I0421 04:11:48.171528       1 logs.go:41] skydns: ready for queries on cluster.local. for tcp://0.0.0.0:10053 [rcache 0]
I0421 04:11:48.171538       1 logs.go:41] skydns: ready for queries on cluster.local. for udp://0.0.0.0:10053 [rcache 0]
I0421 04:11:48.672121       1 dns.go:222] Initialized services and endpoints from apiserver
I0421 04:11:48.672233       1 server.go:137] Setting up Healthz Handler (/readiness)
I0421 04:11:48.672278       1 server.go:142] Setting up cache handler (/cache)
I0421 04:11:48.672364       1 server.go:128] Status HTTP port 8081
I0421 05:02:54.685089       1 dns.go:601] Could not find endpoints for service "cassandra" in namespace "default". DNS records will be created once endpoints show up.
==== END logs for container kubedns of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
==== START logs for container dnsmasq of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
I0421 04:11:48.539589       1 main.go:74] opts: {{/usr/sbin/dnsmasq [-k --cache-size=1000 --no-negcache --log-facility=- --server=/cluster.local/127.0.0.1#10053 --server=/in-addr.arpa/127.0.0.1#10053 --server=/ip6.arpa/127.0.0.1#10053] true} /etc/k8s/dns/dnsmasq-nanny 10000000000}
I0421 04:11:48.539759       1 nanny.go:94] Starting dnsmasq [-k --cache-size=1000 --no-negcache --log-facility=- --server=/cluster.local/127.0.0.1#10053 --server=/in-addr.arpa/127.0.0.1#10053 --server=/ip6.arpa/127.0.0.1#10053]
I0421 04:11:49.164575       1 nanny.go:119] 
W0421 04:11:49.164619       1 nanny.go:120] Got EOF from stdout
I0421 04:11:49.164705       1 nanny.go:116] dnsmasq[11]: started, version 2.78 cachesize 1000
I0421 04:11:49.164777       1 nanny.go:116] dnsmasq[11]: compile time options: IPv6 GNU-getopt no-DBus no-i18n no-IDN DHCP DHCPv6 no-Lua TFTP no-conntrack ipset auth no-DNSSEC loop-detect inotify
I0421 04:11:49.164843       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain ip6.arpa 
I0421 04:11:49.164918       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain in-addr.arpa 
I0421 04:11:49.164987       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain cluster.local 
I0421 04:11:49.165091       1 nanny.go:116] dnsmasq[11]: reading /etc/resolv.conf
I0421 04:11:49.165148       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain ip6.arpa 
I0421 04:11:49.165209       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain in-addr.arpa 
I0421 04:11:49.165260       1 nanny.go:116] dnsmasq[11]: using nameserver 127.0.0.1#10053 for domain cluster.local 
I0421 04:11:49.165324       1 nanny.go:116] dnsmasq[11]: using nameserver 169.254.169.254#53
I0421 04:11:49.165457       1 nanny.go:116] dnsmasq[11]: read /etc/hosts - 7 addresses
==== END logs for container dnsmasq of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
==== START logs for container sidecar of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
I0421 04:11:49.959555       1 main.go:51] Version v1.14.13
I0421 04:11:49.959753       1 server.go:45] Starting server (options {DnsMasqPort:53 DnsMasqAddr:127.0.0.1 DnsMasqPollIntervalMs:5000 Probes:[{Label:kubedns Server:127.0.0.1:10053 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33} {Label:dnsmasq Server:127.0.0.1:53 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}] PrometheusAddr:0.0.0.0 PrometheusPort:10054 PrometheusPath:/metrics PrometheusNamespace:kubedns})
I0421 04:11:49.959901       1 dnsprobe.go:75] Starting dnsProbe {Label:kubedns Server:127.0.0.1:10053 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}
I0421 04:11:49.960056       1 dnsprobe.go:75] Starting dnsProbe {Label:dnsmasq Server:127.0.0.1:53 Name:kubernetes.default.svc.cluster.local. Interval:5s Type:33}
==== END logs for container sidecar of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
==== START logs for container prometheus-to-sd of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
I0421 04:11:51.353737       1 main.go:82] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo ClusterLocation: Instance:gke-k8s-demo-default-pool-bc3c4575-9jxq MetricsPrefix:container.googleapis.com/internal/addons MonitoredResourceTypes:gke_container}
I0421 04:11:51.353836       1 main.go:122] Taking source configs from flags
I0421 04:11:51.353863       1 main.go:124] Taking source configs from kubernetes api server
I0421 04:11:51.354104       1 main.go:85] Built the following source configs: [{kubedns localhost 10054 /metrics [probe_kubedns_latency_ms probe_kubedns_errors dnsmasq_misses dnsmasq_hits] 0xc4200643c0}]
I0421 04:11:51.354447       1 main.go:133] Running prometheus-to-sd, monitored target is kubedns localhost:10054
==== END logs for container prometheus-to-sd of pod kube-system/kube-dns-7df4cb66cb-mx4fs ====
==== START logs for container autoscaler of pod kube-system/kube-dns-autoscaler-67c97c87fb-6l4rd ====
I0421 04:11:41.323345       1 autoscaler.go:49] Scaling Namespace: kube-system, Target: deployment/kube-dns
I0421 04:11:41.412908       1 autoscaler_server.go:133] ConfigMap not found: configmaps "kube-dns-autoscaler" not found, will create one with default params
I0421 04:11:41.419469       1 k8sclient.go:117] Created ConfigMap kube-dns-autoscaler in namespace kube-system
I0421 04:11:41.419493       1 plugin.go:50] Set control mode to linear
I0421 04:11:41.419507       1 linear_controller.go:59] ConfigMap version change (old:  new: 617) - rebuilding params
I0421 04:11:41.419512       1 linear_controller.go:60] Params from apiserver: 
{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}
I0421 04:11:41.419559       1 linear_controller.go:79] Defaulting min replicas count to 1 for linear controller
I0421 04:11:41.422846       1 k8sclient.go:179] Cluster status: SchedulableNodes[3], SchedulableCores[6]
I0421 04:11:41.422866       1 k8sclient.go:180] Replicas are not as expected : updating replicas from 1 to 2
==== END logs for container autoscaler of pod kube-system/kube-dns-autoscaler-67c97c87fb-6l4rd ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-9jxq ====
==== END logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-9jxq ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-mzfw ====
==== END logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-mzfw ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-qmwj ====
==== END logs for container kube-proxy of pod kube-system/kube-proxy-gke-k8s-demo-default-pool-bc3c4575-qmwj ====
==== START logs for container default-http-backend of pod kube-system/l7-default-backend-7ff48cffd7-zh6cc ====
==== END logs for container default-http-backend of pod kube-system/l7-default-backend-7ff48cffd7-zh6cc ====
==== START logs for container metrics-server of pod kube-system/metrics-server-v0.2.1-fd596d746-h99sk ====
I0421 04:11:52.157771       1 heapster.go:71] /metrics-server --source=kubernetes.summary_api:''
I0421 04:11:52.158007       1 heapster.go:72] Metrics Server version v0.2.1
I0421 04:11:52.160407       1 configs.go:61] Using Kubernetes client with master "https://10.3.240.1:443" and version 
I0421 04:11:52.160694       1 configs.go:62] Using kubelet port 10255
I0421 04:11:52.166217       1 heapster.go:128] Starting with Metric Sink
I0421 04:11:55.657196       1 serving.go:308] Generated self-signed cert (apiserver.local.config/certificates/apiserver.crt, apiserver.local.config/certificates/apiserver.key)
I0421 04:12:08.107532       1 heapster.go:101] Starting Heapster API server...
[restful] 2019/04/21 04:12:08 log.go:33: [restful/swagger] listing is available at https:///swaggerapi
[restful] 2019/04/21 04:12:08 log.go:33: [restful/swagger] https:///swaggerui/ is mapped to folder /swagger-ui/
I0421 04:12:08.160524       1 serve.go:85] Serving securely on 0.0.0.0:443
==== END logs for container metrics-server of pod kube-system/metrics-server-v0.2.1-fd596d746-h99sk ====
==== START logs for container metrics-server-nanny of pod kube-system/metrics-server-v0.2.1-fd596d746-h99sk ====
ERROR: logging before flag.Parse: I0421 04:11:50.602038       1 pod_nanny.go:64] Invoked by [/pod_nanny --config-dir=/etc/config --cpu=40m --extra-cpu=0.5m --memory=40Mi --extra-memory=4Mi --threshold=5 --deployment=metrics-server-v0.2.1 --container=metrics-server --poll-period=300000 --estimator=exponential]
ERROR: logging before flag.Parse: I0421 04:11:50.602814       1 pod_nanny.go:76] Watching namespace: kube-system, pod: metrics-server-v0.2.1-fd596d746-h99sk, container: metrics-server.
ERROR: logging before flag.Parse: I0421 04:11:50.602832       1 pod_nanny.go:77] storage: MISSING, extra_storage: 0Gi
ERROR: logging before flag.Parse: I0421 04:11:50.663943       1 pod_nanny.go:166] MISSING
ERROR: logging before flag.Parse: I0421 04:11:50.664054       1 pod_nanny.go:101] cpu: 40m, extra_cpu: 0.5m, memory: 40Mi, extra_memory: 4Mi
ERROR: logging before flag.Parse: I0421 04:11:50.664081       1 pod_nanny.go:130] Resources: [{Base:{i:{value:40 scale:-3} d:{Dec:<nil>} s:40m Format:DecimalSI} ExtraPerNode:{i:{value:5 scale:-4} d:{Dec:<nil>} s: Format:DecimalSI} Name:cpu} {Base:{i:{value:41943040 scale:0} d:{Dec:<nil>} s: Format:BinarySI} ExtraPerNode:{i:{value:4194304 scale:0} d:{Dec:<nil>} s:4Mi Format:BinarySI} Name:memory}]
==== END logs for container metrics-server-nanny of pod kube-system/metrics-server-v0.2.1-fd596d746-h99sk ====
==== START logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-c82zs ====
I0421 04:11:28.256082       1 main.go:83] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo ClusterLocation: Instance:gke-k8s-demo-default-pool-bc3c4575-qmwj MonitoredResourceTypes:gke_container}
I0421 04:11:28.355912       1 main.go:123] Taking source configs from flags
I0421 04:11:28.356271       1 main.go:125] Taking source configs from kubernetes api server
I0421 04:11:28.356321       1 main.go:86] Built the following source configs: [0xc4202fe930 0xc4202fe9a0]
I0421 04:11:28.356511       1 main.go:134] Running prometheus-to-sd, monitored target is kubelet localhost:10255
I0421 04:11:28.356611       1 main.go:134] Running prometheus-to-sd, monitored target is kube-proxy localhost:10249
==== END logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-c82zs ====
==== START logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-d2mnk ====
I0421 04:11:26.903225       1 main.go:83] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo ClusterLocation: Instance:gke-k8s-demo-default-pool-bc3c4575-9jxq MonitoredResourceTypes:gke_container}
I0421 04:11:26.903330       1 main.go:123] Taking source configs from flags
I0421 04:11:26.903346       1 main.go:125] Taking source configs from kubernetes api server
I0421 04:11:26.903373       1 main.go:86] Built the following source configs: [0xc42033abd0 0xc42033ac40]
I0421 04:11:26.903403       1 main.go:134] Running prometheus-to-sd, monitored target is kubelet localhost:10255
I0421 04:11:26.903520       1 main.go:134] Running prometheus-to-sd, monitored target is kube-proxy localhost:10249
==== END logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-d2mnk ====
==== START logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-pw4vg ====
I0421 04:11:27.253248       1 main.go:83] GCE config: &{Project:sapient-office-218912 Zone:us-central1-a Cluster:k8s-demo ClusterLocation: Instance:gke-k8s-demo-default-pool-bc3c4575-mzfw MonitoredResourceTypes:gke_container}
I0421 04:11:27.253350       1 main.go:123] Taking source configs from flags
I0421 04:11:27.253364       1 main.go:125] Taking source configs from kubernetes api server
I0421 04:11:27.253379       1 main.go:86] Built the following source configs: [0xc4203100e0 0xc420310150]
I0421 04:11:27.253406       1 main.go:134] Running prometheus-to-sd, monitored target is kubelet localhost:10255
I0421 04:11:27.253548       1 main.go:134] Running prometheus-to-sd, monitored target is kube-proxy localhost:10249
==== END logs for container prometheus-to-sd of pod kube-system/prometheus-to-sd-pw4vg ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "602"
    },
    "items": []
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "30957"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "30958"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "71bb100f-63eb-11e9-858b-42010a800036",
                "resourceVersion": "29",
                "creationTimestamp": "2019-04-21T04:10:48Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 443
                    }
                ],
                "clusterIP": "10.3.240.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "30958"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "30958"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "30958"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "30959"
    },
    "items": []
}
Cluster info dumped to standard output
